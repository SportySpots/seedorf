---
- include: dev_tools.yml

- include: users.yml

- include: known_hosts.yml

- name: Setup Nginx
  include_role:
    name: geerlingguy.nginx
  vars:
    nginx_vhosts:
    - listen: "80"
      server_name: "{{ deploy.sub_domain }}.{{ domain }} {{ deploy.type }}.{{ domain }}"
      filename: "{{ deploy.sub_domain }}.{{ domain }}.80.conf"
      state: "present"
      access_log: "/var/log/nginx/sportyspots-{{ deploy.type }}-access.log"
      error_log: "/var/log/nginx/sportyspots-{{ deploy.type }}-error.log"
      return: "301 https://{{ deploy.sub_domain }}.{{ domain }}$request_uri"
    - listen: "443 ssl http2"
      server_name: "{{ deploy.sub_domain }}.{{ domain }} {{ deploy.type }}.{{ domain }}"
      state: "present"
      filename: "{{ deploy.sub_domain }}.{{ domain }}.443.conf"
      access_log: "/var/log/nginx/sportyspots-{{ deploy.type }}-access.log"
      error_log: "/var/log/nginx/sportyspots-{{ deploy.type }}-error.log"
      extra_parameters: |
        ssl_certificate     /etc/letsencrypt/live/{{ deploy.sub_domain }}.{{ domain }}/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/{{ deploy.sub_domain }}.{{ domain }}/privkey.pem;
        ssl_protocols       TLSv1.1 TLSv1.2;
        ssl_ciphers         HIGH:!aNULL:!MD5;

        # deny illegal Host headers
        if ($host !~* ^({{ deploy.sub_domain }}.{{ domain }})$ ) {
            return 444;
        }

        # path for static files
        location /static/ {
            alias /home/ubuntu/sportyspots/{{ deploy.type }}/staticfiles/;
        }
        location /media/ {
            alias /home/ubuntu/sportysptos/{{ deploy.type }}/media/;
        }

        # Add nice user message when supervisor is down
        error_page 502 /error/502.html;
        location /error/ {
            alias  /srv/error-pages/;
        }

        location / {
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_set_header Host $http_host;
          proxy_set_header X-Forwarded-Proto $scheme;
          proxy_redirect off;
          proxy_read_timeout 300;

          proxy_pass http://unix:/tmp/sportyspots-{{ deploy.type }}.sock;
        }

        # If Django is not specifically addressed always return 404
        # This prevents all the cracking /xmlrpc.php etc. to show up and trigger
        # Django errors
        # return 404;
  notify: restart_nginx
  handlers:
    - include: ../../handlers.yml


- name: Download certbot
  get_url:
    url: https://dl.eff.org/certbot-auto
    dest: "{{ certbot_script }}"
    mode: 0755
  tags:
    - letsencrypt

- name: Check if Nginx exists
  stat:
    path: /etc/init.d/nginx
  register: nginx_status
  tags:
    - letsencrypt

- name: Ensure Nginx is stopped
  service:
    name: nginx
    state: stopped
  when: nginx_status.stat.exists
  tags:
    - letsencrypt

- name: Install certbot and generate cert - {{ deploy.sub_domain }}.{{ domain }}
  command: "{{ certbot_script }} certonly --noninteractive --agree-tos --standalone --email {{ certbot_admin_email }} -d {{ deploy.sub_domain }}.{{ domain }}"
  args:
    creates: "/etc/letsencrypt/live/{{ deploy.sub_domain }}.{{ domain }}"
  tags:
    - letsencrypt

- name: Install certbot and generate cert - {{ deploy.type }}.{{ domain }}
  command: "{{ certbot_script }} certonly --noninteractive --agree-tos --standalone --email {{ certbot_admin_email }} -d {{ deploy.type }}.{{ domain }}"
  args:
    creates: "/etc/letsencrypt/live/{{ deploy.type }}.{{ domain }}"
  tags:
    - letsencrypt

- name: Ensure Nginx is started
  service:
    name: nginx
    state: started
  when: nginx_status.stat.exists
  tags:
    - letsencrypt

- name: Ensure a cron job to auto-renew the cert exists
  cron:
    name: "letsencrypt"
    user: root
    cron_file: "letsencrypt"
    special_time: weekly
    job: "{{ certbot_script }} renew --standalone --pre-hook \"service nginx stop\" --post-hook \"service nginx start\" --quiet"
    state: present
  when: certbot_auto_renew
  tags:
    - letsencrypt

- name: Deploy instances
  become_user: ubuntu
  include: deploy_project.yml
  tags:
    - deploy_project

#- name: Test secure connection to SSL domain.
#  become: False
#  uri:
#    url: "https://{{ deploy.sub_domain }}.{{ domain }}/api/"
#    status_code: 200
#  delegate_to: localhost

...
