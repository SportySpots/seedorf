
(function(r,f) {
	var a=f();
	if(typeof a!=='object')return;
	var e=[typeof module==='object'&&typeof module.exports==='object'?module.exports:null,typeof window!=='undefined'?window:null,r&&r!==window?r:null];
	for(var i in a){e[0]&&(e[0][i]=a[i]);e[1]&&i!=='__esModule'&&(e[1][i] = a[i]);e[2]&&(e[2][i]=a[i]);}
})(this,function(){
	return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./libs/bootstrap-material-datetimepicker/bootstrap-material-datetimepicker.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./libs/bootstrap-material-datetimepicker/_extension.es6":
/*!***************************************************************!*\
  !*** ./libs/bootstrap-material-datetimepicker/_extension.es6 ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var originalPicker = $.fn.bootstrapMaterialDatePicker;\n\n$.fn.bootstrapMaterialDatePicker = function () {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  this.each(function () {\n    var newInstance = !$.data(this, 'plugin_bootstrapMaterialDatePicker');\n    originalPicker.apply($(this), args);\n\n    if (newInstance) {\n      var $template = $('body').find(\"> #\".concat($.data(this, 'plugin_bootstrapMaterialDatePicker').name)); // Add animation\n\n      $template.addClass('animated fadeIn'); // Styling buttons\n\n      $template.find('.dtp-btn-now,.dtp-btn-clear,.dtp-btn-cancel').addClass('btn-default btn-sm');\n      $template.find('.dtp-btn-ok').addClass('btn-primary btn-sm');\n    }\n  });\n  return this;\n};\n\n//# sourceURL=webpack:///./libs/bootstrap-material-datetimepicker/_extension.es6?");

/***/ }),

/***/ "./libs/bootstrap-material-datetimepicker/bootstrap-material-datetimepicker.js":
/*!*************************************************************************************!*\
  !*** ./libs/bootstrap-material-datetimepicker/bootstrap-material-datetimepicker.js ***!
  \*************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("__webpack_require__(/*! ../../node_modules/bootstrap-material-datetimepicker/js/bootstrap-material-datetimepicker.js */ \"./node_modules/bootstrap-material-datetimepicker/js/bootstrap-material-datetimepicker.js\");\n__webpack_require__(/*! ./_extension.es6 */ \"./libs/bootstrap-material-datetimepicker/_extension.es6\");\n\n\n//# sourceURL=webpack:///./libs/bootstrap-material-datetimepicker/bootstrap-material-datetimepicker.js?");

/***/ }),

/***/ "./node_modules/bootstrap-material-datetimepicker/js/bootstrap-material-datetimepicker.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/bootstrap-material-datetimepicker/js/bootstrap-material-datetimepicker.js ***!
  \************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("(function ($, moment)\r\n{\r\n   var pluginName = \"bootstrapMaterialDatePicker\";\r\n   var pluginDataName = \"plugin_\" + pluginName;\r\n\r\n   moment.locale('en');\r\n\r\n   function Plugin(element, options)\r\n   {\r\n      this.currentView = 0;\r\n\r\n      this.minDate;\r\n      this.maxDate;\r\n\r\n      this._attachedEvents = [];\r\n\r\n      this.element = element;\r\n      this.$element = $(element);\r\n\r\n\r\n      this.params = {date: true, time: true, format: 'YYYY-MM-DD', minDate: null, maxDate: null, currentDate: null, lang: 'en', weekStart: 0, disabledDays: [], shortTime: false, clearButton: false, nowButton: false, cancelText: 'Cancel', okText: 'OK', clearText: 'Clear', nowText: 'Now', switchOnClick: false, triggerEvent: 'focus', monthPicker: false, year:true};\r\n      this.params = $.fn.extend(this.params, options);\r\n\r\n      this.name = \"dtp_\" + this.setName();\r\n      this.$element.attr(\"data-dtp\", this.name);\r\n\r\n      moment.locale(this.params.lang);\r\n\r\n      this.init();\r\n   }\r\n\r\n   $.fn[pluginName] = function (options, p)\r\n   {\r\n      this.each(function ()\r\n      {\r\n         if (!$.data(this, pluginDataName))\r\n         {\r\n            $.data(this, pluginDataName, new Plugin(this, options));\r\n         } else\r\n         {\r\n            if (typeof ($.data(this, pluginDataName)[options]) === 'function')\r\n            {\r\n               $.data(this, pluginDataName)[options](p);\r\n            }\r\n            if (options === 'destroy')\r\n            {\r\n               delete $.data(this, pluginDataName);\r\n            }\r\n         }\r\n      });\r\n      return this;\r\n   };\r\n\r\n   Plugin.prototype =\r\n           {\r\n              init: function ()\r\n              {\r\n                 this.initDays();\r\n                 this.initDates();\r\n\r\n                 this.initTemplate();\r\n\r\n                 this.initButtons();\r\n\r\n                 this._attachEvent($(window), 'resize', this._centerBox.bind(this));\r\n                 this._attachEvent(this.$dtpElement.find('.dtp-content'), 'click', this._onElementClick.bind(this));\r\n                 this._attachEvent(this.$dtpElement, 'click', this._onBackgroundClick.bind(this));\r\n                 this._attachEvent(this.$dtpElement.find('.dtp-close > a'), 'click', this._onCloseClick.bind(this));\r\n                 this._attachEvent(this.$element, this.params.triggerEvent, this._fireCalendar.bind(this));\r\n              },\r\n              initDays: function ()\r\n              {\r\n                 this.days = [];\r\n                 for (var i = this.params.weekStart; this.days.length < 7; i++)\r\n                 {\r\n                    if (i > 6)\r\n                    {\r\n                       i = 0;\r\n                    }\r\n                    this.days.push(i.toString());\r\n                 }\r\n              },\r\n              initDates: function ()\r\n              {\r\n                 if (this.$element.val().length > 0)\r\n                 {\r\n                    if (typeof (this.params.format) !== 'undefined' && this.params.format !== null)\r\n                    {\r\n                       this.currentDate = moment(this.$element.val(), this.params.format).locale(this.params.lang);\r\n                    } else\r\n                    {\r\n                       this.currentDate = moment(this.$element.val()).locale(this.params.lang);\r\n                    }\r\n                 } else\r\n                 {\r\n                    if (typeof (this.$element.attr('value')) !== 'undefined' && this.$element.attr('value') !== null && this.$element.attr('value') !== \"\")\r\n                    {\r\n                       if (typeof (this.$element.attr('value')) === 'string')\r\n                       {\r\n                          if (typeof (this.params.format) !== 'undefined' && this.params.format !== null)\r\n                          {\r\n                             this.currentDate = moment(this.$element.attr('value'), this.params.format).locale(this.params.lang);\r\n                          } else\r\n                          {\r\n                             this.currentDate = moment(this.$element.attr('value')).locale(this.params.lang);\r\n                          }\r\n                       }\r\n                    } else\r\n                    {\r\n                       if (typeof (this.params.currentDate) !== 'undefined' && this.params.currentDate !== null)\r\n                       {\r\n                          if (typeof (this.params.currentDate) === 'string')\r\n                          {\r\n                             if (typeof (this.params.format) !== 'undefined' && this.params.format !== null)\r\n                             {\r\n                                this.currentDate = moment(this.params.currentDate, this.params.format).locale(this.params.lang);\r\n                             } else\r\n                             {\r\n                                this.currentDate = moment(this.params.currentDate).locale(this.params.lang);\r\n                             }\r\n                          } else\r\n                          {\r\n                             if (typeof (this.params.currentDate.isValid) === 'undefined' || typeof (this.params.currentDate.isValid) !== 'function')\r\n                             {\r\n                                var x = this.params.currentDate.getTime();\r\n                                this.currentDate = moment(x, \"x\").locale(this.params.lang);\r\n                             } else\r\n                             {\r\n                                this.currentDate = this.params.currentDate;\r\n                             }\r\n                          }\r\n                          this.$element.val(this.currentDate.format(this.params.format));\r\n                       } else\r\n                          this.currentDate = moment();\r\n                    }\r\n                 }\r\n\r\n                 if (typeof (this.params.minDate) !== 'undefined' && this.params.minDate !== null)\r\n                 {\r\n                    if (typeof (this.params.minDate) === 'string')\r\n                    {\r\n                       if (typeof (this.params.format) !== 'undefined' && this.params.format !== null)\r\n                       {\r\n                          this.minDate = moment(this.params.minDate, this.params.format).locale(this.params.lang);\r\n                       } else\r\n                       {\r\n                          this.minDate = moment(this.params.minDate).locale(this.params.lang);\r\n                       }\r\n                    } else\r\n                    {\r\n                       if (typeof (this.params.minDate.isValid) === 'undefined' || typeof (this.params.minDate.isValid) !== 'function')\r\n                       {\r\n                          var x = this.params.minDate.getTime();\r\n                          this.minDate = moment(x, \"x\").locale(this.params.lang);\r\n                       } else\r\n                       {\r\n                          this.minDate = this.params.minDate;\r\n                       }\r\n                    }\r\n                 } else if (this.params.minDate === null)\r\n                 {\r\n                    this.minDate = null;\r\n                 }\r\n\r\n                 if (typeof (this.params.maxDate) !== 'undefined' && this.params.maxDate !== null)\r\n                 {\r\n                    if (typeof (this.params.maxDate) === 'string')\r\n                    {\r\n                       if (typeof (this.params.format) !== 'undefined' && this.params.format !== null)\r\n                       {\r\n                          this.maxDate = moment(this.params.maxDate, this.params.format).locale(this.params.lang);\r\n                       } else\r\n                       {\r\n                          this.maxDate = moment(this.params.maxDate).locale(this.params.lang);\r\n                       }\r\n                    } else\r\n                    {\r\n                       if (typeof (this.params.maxDate.isValid) === 'undefined' || typeof (this.params.maxDate.isValid) !== 'function')\r\n                       {\r\n                          var x = this.params.maxDate.getTime();\r\n                          this.maxDate = moment(x, \"x\").locale(this.params.lang);\r\n                       } else\r\n                       {\r\n                          this.maxDate = this.params.maxDate;\r\n                       }\r\n                    }\r\n                 } else if (this.params.maxDate === null)\r\n                 {\r\n                    this.maxDate = null;\r\n                 }\r\n\r\n                 if (!this.isAfterMinDate(this.currentDate))\r\n                 {\r\n                    this.currentDate = moment(this.minDate);\r\n                 }\r\n                 if (!this.isBeforeMaxDate(this.currentDate))\r\n                 {\r\n                    this.currentDate = moment(this.maxDate);\r\n                 }\r\n              },\r\n              initTemplate: function ()\r\n              {\r\n                  var yearPicker = \"\";\r\n                  var y =this.currentDate.year();\r\n                  for (var i = y-3; i < y + 4; i++) {\r\n                      yearPicker += '<div class=\"year-picker-item\" data-year=\"' + i + '\">' + i + '</div>';\r\n                  }\r\n                  this.midYear=y;\r\n                  var yearHtml =\r\n                      '<div class=\"dtp-picker-year hidden\" >' +\r\n                      '<div><a href=\"javascript:void(0);\" class=\"btn btn-default dtp-select-year-range before\" style=\"margin: 0;\"><i class=\"material-icons\">keyboard_arrow_up</i></a></div>' +\r\n                      yearPicker +\r\n                      '<div><a href=\"javascript:void(0);\" class=\"btn btn-default dtp-select-year-range after\" style=\"margin: 0;\"><i class=\"material-icons\">keyboard_arrow_down</i></a></div>' +\r\n                      '</div>';\r\n\r\n                 this.template = '<div class=\"dtp hidden\" id=\"' + this.name + '\">' +\r\n                         '<div class=\"dtp-content\">' +\r\n                         '<div class=\"dtp-date-view\">' +\r\n                         '<header class=\"dtp-header\">' +\r\n                         '<div class=\"dtp-actual-day\">Lundi</div>' +\r\n                         '<div class=\"dtp-close\"><a href=\"javascript:void(0);\"><i class=\"material-icons\">clear</i></a></div>' +\r\n                         '</header>' +\r\n                         '<div class=\"dtp-date hidden\">' +\r\n                         '<div>' +\r\n                         '<div class=\"left center p10\">' +\r\n                         '<a href=\"javascript:void(0);\" class=\"dtp-select-month-before\"><i class=\"material-icons\">chevron_left</i></a>' +\r\n                         '</div>' +\r\n                         '<div class=\"dtp-actual-month p80\">MAR</div>' +\r\n                         '<div class=\"right center p10\">' +\r\n                         '<a href=\"javascript:void(0);\" class=\"dtp-select-month-after\"><i class=\"material-icons\">chevron_right</i></a>' +\r\n                         '</div>' +\r\n                         '<div class=\"clearfix\"></div>' +\r\n                         '</div>' +\r\n                         '<div class=\"dtp-actual-num\">13</div>' +\r\n                         '<div>' +\r\n                         '<div class=\"left center p10\">' +\r\n                         '<a href=\"javascript:void(0);\" class=\"dtp-select-year-before\"><i class=\"material-icons\">chevron_left</i></a>' +\r\n                         '</div>' +\r\n                         '<div class=\"dtp-actual-year p80'+(this.params.year?\"\":\" disabled\")+'\">2014</div>' +\r\n                         '<div class=\"right center p10\">' +\r\n                         '<a href=\"javascript:void(0);\" class=\"dtp-select-year-after\"><i class=\"material-icons\">chevron_right</i></a>' +\r\n                         '</div>' +\r\n                         '<div class=\"clearfix\"></div>' +\r\n                         '</div>' +\r\n                         '</div>' +\r\n                         '<div class=\"dtp-time hidden\">' +\r\n                         '<div class=\"dtp-actual-maxtime\">23:55</div>' +\r\n                         '</div>' +\r\n                         '<div class=\"dtp-picker\">' +\r\n                         '<div class=\"dtp-picker-calendar\"></div>' +\r\n                         '<div class=\"dtp-picker-datetime hidden\">' +\r\n                         '<div class=\"dtp-actual-meridien\">' +\r\n                         '<div class=\"left p20\">' +\r\n                         '<a class=\"dtp-meridien-am\" href=\"javascript:void(0);\">AM</a>' +\r\n                         '</div>' +\r\n                         '<div class=\"dtp-actual-time p60\"></div>' +\r\n                         '<div class=\"right p20\">' +\r\n                         '<a class=\"dtp-meridien-pm\" href=\"javascript:void(0);\">PM</a>' +\r\n                         '</div>' +\r\n                         '<div class=\"clearfix\"></div>' +\r\n                         '</div>' +\r\n                         '<div id=\"dtp-svg-clock\">' +\r\n                         '</div>' +\r\n                         '</div>' +\r\n                         yearHtml+\r\n                         '</div>' +\r\n                         '</div>' +\r\n                         '<div class=\"dtp-buttons\">' +\r\n                         '<button class=\"dtp-btn-now btn btn-flat hidden\">' + this.params.nowText + '</button>' +\r\n                         '<button class=\"dtp-btn-clear btn btn-flat hidden\">' + this.params.clearText + '</button>' +\r\n                         '<button class=\"dtp-btn-cancel btn btn-flat\">' + this.params.cancelText + '</button>' +\r\n                         '<button class=\"dtp-btn-ok btn btn-flat\">' + this.params.okText + '</button>' +\r\n                         '<div class=\"clearfix\"></div>' +\r\n                         '</div>' +\r\n                         '</div>' +\r\n                         '</div>';\r\n\r\n                 if ($('body').find(\"#\" + this.name).length <= 0)\r\n                 {\r\n                    $('body').append(this.template);\r\n\r\n                    if (this)\r\n                       this.dtpElement = $('body').find(\"#\" + this.name);\r\n                    this.$dtpElement = $(this.dtpElement);\r\n                 }\r\n              },\r\n              initButtons: function ()\r\n              {\r\n                 this._attachEvent(this.$dtpElement.find('.dtp-btn-cancel'), 'click', this._onCancelClick.bind(this));\r\n                 this._attachEvent(this.$dtpElement.find('.dtp-btn-ok'), 'click', this._onOKClick.bind(this));\r\n                 this._attachEvent(this.$dtpElement.find('a.dtp-select-month-before'), 'click', this._onMonthBeforeClick.bind(this));\r\n                 this._attachEvent(this.$dtpElement.find('a.dtp-select-month-after'), 'click', this._onMonthAfterClick.bind(this));\r\n                 this._attachEvent(this.$dtpElement.find('a.dtp-select-year-before'), 'click', this._onYearBeforeClick.bind(this));\r\n                 this._attachEvent(this.$dtpElement.find('a.dtp-select-year-after'), 'click', this._onYearAfterClick.bind(this));\r\n                 this._attachEvent(this.$dtpElement.find('.dtp-actual-year'), 'click', this._onActualYearClick.bind(this));\r\n                 this._attachEvent(this.$dtpElement.find('a.dtp-select-year-range.before'), 'click', this._onYearRangeBeforeClick.bind(this));\r\n                 this._attachEvent(this.$dtpElement.find('a.dtp-select-year-range.after'), 'click', this._onYearRangeAfterClick.bind(this));\r\n                 this._attachEvent(this.$dtpElement.find('div.year-picker-item'), 'click', this._onYearItemClick.bind(this));\r\n\r\n                 if (this.params.clearButton === true)\r\n                 {\r\n                    this._attachEvent(this.$dtpElement.find('.dtp-btn-clear'), 'click', this._onClearClick.bind(this));\r\n                    this.$dtpElement.find('.dtp-btn-clear').removeClass('hidden');\r\n                 }\r\n\r\n                 if (this.params.nowButton === true)\r\n                 {\r\n                    this._attachEvent(this.$dtpElement.find('.dtp-btn-now'), 'click', this._onNowClick.bind(this));\r\n                    this.$dtpElement.find('.dtp-btn-now').removeClass('hidden');\r\n                 }\r\n\r\n                 if ((this.params.nowButton === true) && (this.params.clearButton === true))\r\n                 {\r\n                    this.$dtpElement.find('.dtp-btn-clear, .dtp-btn-now, .dtp-btn-cancel, .dtp-btn-ok').addClass('btn-xs');\r\n                 } else if ((this.params.nowButton === true) || (this.params.clearButton === true))\r\n                 {\r\n                    this.$dtpElement.find('.dtp-btn-clear, .dtp-btn-now, .dtp-btn-cancel, .dtp-btn-ok').addClass('btn-sm');\r\n                 }\r\n              },\r\n              initMeridienButtons: function ()\r\n              {\r\n                 this.$dtpElement.find('a.dtp-meridien-am').off('click').on('click', this._onSelectAM.bind(this));\r\n                 this.$dtpElement.find('a.dtp-meridien-pm').off('click').on('click', this._onSelectPM.bind(this));\r\n              },\r\n              initDate: function (d)\r\n              {\r\n                 this.currentView = 0;\r\n\r\n                 if (this.params.monthPicker === false)\r\n                 {\r\n                    this.$dtpElement.find('.dtp-picker-calendar').removeClass('hidden');\r\n                 }\r\n                 this.$dtpElement.find('.dtp-picker-datetime').addClass('hidden');\r\n                 this.$dtpElement.find('.dtp-picker-year').addClass('hidden');\r\n\r\n                 var _date = ((typeof (this.currentDate) !== 'undefined' && this.currentDate !== null) ? this.currentDate : null);\r\n                 var _calendar = this.generateCalendar(this.currentDate);\r\n\r\n                 if (typeof (_calendar.week) !== 'undefined' && typeof (_calendar.days) !== 'undefined')\r\n                 {\r\n                    var _template = this.constructHTMLCalendar(_date, _calendar);\r\n\r\n                    this.$dtpElement.find('a.dtp-select-day').off('click');\r\n                    this.$dtpElement.find('.dtp-picker-calendar').html(_template);\r\n\r\n                    this.$dtpElement.find('a.dtp-select-day').on('click', this._onSelectDate.bind(this));\r\n\r\n                    this.toggleButtons(_date);\r\n                 }\r\n\r\n                 this._centerBox();\r\n                 this.showDate(_date);\r\n              },\r\n              initHours: function ()\r\n              {\r\n                 this.currentView = 1;\r\n\r\n                 this.showTime(this.currentDate);\r\n                 this.initMeridienButtons();\r\n\r\n                 if (this.currentDate.hour() < 12)\r\n                 {\r\n                    this.$dtpElement.find('a.dtp-meridien-am').click();\r\n                 } else\r\n                 {\r\n                    this.$dtpElement.find('a.dtp-meridien-pm').click();\r\n                 }\r\n\r\n                 var hFormat = ((this.params.shortTime) ? 'h' : 'H');\r\n\r\n                 this.$dtpElement.find('.dtp-picker-datetime').removeClass('hidden');\r\n                 this.$dtpElement.find('.dtp-picker-calendar').addClass('hidden');\r\n                 this.$dtpElement.find('.dtp-picker-year').addClass('hidden');\r\n\r\n                 var svgClockElement = this.createSVGClock(true);\r\n\r\n                 for (var i = 0; i < 12; i++)\r\n                 {\r\n                    var x = -(162 * (Math.sin(-Math.PI * 2 * (i / 12))));\r\n                    var y = -(162 * (Math.cos(-Math.PI * 2 * (i / 12))));\r\n\r\n                    var fill = ((this.currentDate.format(hFormat) == i) ? \"#8BC34A\" : 'transparent');\r\n                    var color = ((this.currentDate.format(hFormat) == i) ? \"#fff\" : '#000');\r\n\r\n                    var svgHourCircle = this.createSVGElement(\"circle\", {'id': 'h-' + i, 'class': 'dtp-select-hour', 'style': 'cursor:pointer', r: '30', cx: x, cy: y, fill: fill, 'data-hour': i});\r\n\r\n                    var svgHourText = this.createSVGElement(\"text\", {'id': 'th-' + i, 'class': 'dtp-select-hour-text', 'text-anchor': 'middle', 'style': 'cursor:pointer', 'font-weight': 'bold', 'font-size': '20', x: x, y: y + 7, fill: color, 'data-hour': i});\r\n                    svgHourText.textContent = ((i === 0) ? ((this.params.shortTime) ? 12 : i) : i);\r\n\r\n                    if (!this.toggleTime(i, true))\r\n                    {\r\n                       svgHourCircle.className += \" disabled\";\r\n                       svgHourText.className += \" disabled\";\r\n                       svgHourText.setAttribute('fill', '#bdbdbd');\r\n                    } else\r\n                    {\r\n                       svgHourCircle.addEventListener('click', this._onSelectHour.bind(this));\r\n                       svgHourText.addEventListener('click', this._onSelectHour.bind(this));\r\n                    }\r\n\r\n                    svgClockElement.appendChild(svgHourCircle)\r\n                    svgClockElement.appendChild(svgHourText)\r\n                 }\r\n\r\n                 if (!this.params.shortTime)\r\n                 {\r\n                    for (var i = 0; i < 12; i++)\r\n                    {\r\n                       var x = -(110 * (Math.sin(-Math.PI * 2 * (i / 12))));\r\n                       var y = -(110 * (Math.cos(-Math.PI * 2 * (i / 12))));\r\n\r\n                       var fill = ((this.currentDate.format(hFormat) == (i + 12)) ? \"#8BC34A\" : 'transparent');\r\n                       var color = ((this.currentDate.format(hFormat) == (i + 12)) ? \"#fff\" : '#000');\r\n\r\n                       var svgHourCircle = this.createSVGElement(\"circle\", {'id': 'h-' + (i + 12), 'class': 'dtp-select-hour', 'style': 'cursor:pointer', r: '30', cx: x, cy: y, fill: fill, 'data-hour': (i + 12)});\r\n\r\n                       var svgHourText = this.createSVGElement(\"text\", {'id': 'th-' + (i + 12), 'class': 'dtp-select-hour-text', 'text-anchor': 'middle', 'style': 'cursor:pointer', 'font-weight': 'bold', 'font-size': '22', x: x, y: y + 7, fill: color, 'data-hour': (i + 12)});\r\n                       svgHourText.textContent = i + 12;\r\n\r\n                       if (!this.toggleTime(i + 12, true))\r\n                       {\r\n                          svgHourCircle.className += \" disabled\";\r\n                          svgHourText.className += \" disabled\";\r\n                          svgHourText.setAttribute('fill', '#bdbdbd');\r\n                       } else\r\n                       {\r\n                          svgHourCircle.addEventListener('click', this._onSelectHour.bind(this));\r\n                          svgHourText.addEventListener('click', this._onSelectHour.bind(this));\r\n                       }\r\n\r\n                       svgClockElement.appendChild(svgHourCircle)\r\n                       svgClockElement.appendChild(svgHourText)\r\n                    }\r\n\r\n                    this.$dtpElement.find('a.dtp-meridien-am').addClass('hidden');\r\n                    this.$dtpElement.find('a.dtp-meridien-pm').addClass('hidden');\r\n                 }\r\n\r\n                 this._centerBox();\r\n              },\r\n              initMinutes: function ()\r\n              {\r\n                 this.currentView = 2;\r\n\r\n                 this.showTime(this.currentDate);\r\n\r\n                 this.initMeridienButtons();\r\n\r\n                 if (this.currentDate.hour() < 12)\r\n                 {\r\n                    this.$dtpElement.find('a.dtp-meridien-am').click();\r\n                 } else\r\n                 {\r\n                    this.$dtpElement.find('a.dtp-meridien-pm').click();\r\n                 }\r\n\r\n                 this.$dtpElement.find('.dtp-picker-year').addClass('hidden');\r\n                 this.$dtpElement.find('.dtp-picker-calendar').addClass('hidden');\r\n                 this.$dtpElement.find('.dtp-picker-datetime').removeClass('hidden');\r\n\r\n                 var svgClockElement = this.createSVGClock(false);\r\n\r\n                 for (var i = 0; i < 60; i++)\r\n                 {\r\n                    var s = ((i % 5 === 0) ? 162 : 158);\r\n                    var r = ((i % 5 === 0) ? 30 : 20);\r\n\r\n                    var x = -(s * (Math.sin(-Math.PI * 2 * (i / 60))));\r\n                    var y = -(s * (Math.cos(-Math.PI * 2 * (i / 60))));\r\n\r\n                    var color = ((this.currentDate.format(\"m\") == i) ? \"#8BC34A\" : 'transparent');\r\n\r\n                    var svgMinuteCircle = this.createSVGElement(\"circle\", {'id': 'm-' + i, 'class': 'dtp-select-minute', 'style': 'cursor:pointer', r: r, cx: x, cy: y, fill: color, 'data-minute': i});\r\n\r\n                    if (!this.toggleTime(i, false))\r\n                    {\r\n                       svgMinuteCircle.className += \" disabled\";\r\n                    } else\r\n                    {\r\n                       svgMinuteCircle.addEventListener('click', this._onSelectMinute.bind(this));\r\n                    }\r\n\r\n                    svgClockElement.appendChild(svgMinuteCircle)\r\n                 }\r\n\r\n                 for (var i = 0; i < 60; i++)\r\n                 {\r\n                    if ((i % 5) === 0)\r\n                    {\r\n                       var x = -(162 * (Math.sin(-Math.PI * 2 * (i / 60))));\r\n                       var y = -(162 * (Math.cos(-Math.PI * 2 * (i / 60))));\r\n\r\n                       var color = ((this.currentDate.format(\"m\") == i) ? \"#fff\" : '#000');\r\n\r\n                       var svgMinuteText = this.createSVGElement(\"text\", {'id': 'tm-' + i, 'class': 'dtp-select-minute-text', 'text-anchor': 'middle', 'style': 'cursor:pointer', 'font-weight': 'bold', 'font-size': '20', x: x, y: y + 7, fill: color, 'data-minute': i});\r\n                       svgMinuteText.textContent = i;\r\n\r\n                       if (!this.toggleTime(i, false))\r\n                       {\r\n                          svgMinuteText.className += \" disabled\";\r\n                          svgMinuteText.setAttribute('fill', '#bdbdbd');\r\n                       } else\r\n                       {\r\n                          svgMinuteText.addEventListener('click', this._onSelectMinute.bind(this));\r\n                       }\r\n\r\n                       svgClockElement.appendChild(svgMinuteText)\r\n                    }\r\n                 }\r\n\r\n                 this._centerBox();\r\n              },\r\n              animateHands: function ()\r\n              {\r\n                 var H = this.currentDate.hour();\r\n                 var M = this.currentDate.minute();\r\n\r\n                 var hh = this.$dtpElement.find('.hour-hand');\r\n                 hh[0].setAttribute('transform', \"rotate(\" + 360 * H / 12 + \")\");\r\n\r\n                 var mh = this.$dtpElement.find('.minute-hand');\r\n                 mh[0].setAttribute('transform', \"rotate(\" + 360 * M / 60 + \")\");\r\n              },\r\n              createSVGClock: function (isHour)\r\n              {\r\n                 var hl = ((this.params.shortTime) ? -120 : -90);\r\n\r\n                 var svgElement = this.createSVGElement(\"svg\", {class: 'svg-clock', viewBox: '0,0,400,400'});\r\n                 var svgGElement = this.createSVGElement(\"g\", {transform: 'translate(200,200) '});\r\n                 var svgClockFace = this.createSVGElement(\"circle\", {r: '192', fill: '#eee', stroke: '#bdbdbd', 'stroke-width': 2});\r\n                 var svgClockCenter = this.createSVGElement(\"circle\", {r: '15', fill: '#757575'});\r\n\r\n                 svgGElement.appendChild(svgClockFace)\r\n\r\n                 if (isHour)\r\n                 {\r\n                    var svgMinuteHand = this.createSVGElement(\"line\", {class: 'minute-hand', x1: 0, y1: 0, x2: 0, y2: -150, stroke: '#bdbdbd', 'stroke-width': 2});\r\n                    var svgHourHand = this.createSVGElement(\"line\", {class: 'hour-hand', x1: 0, y1: 0, x2: 0, y2: hl, stroke: '#8BC34A', 'stroke-width': 8});\r\n\r\n                    svgGElement.appendChild(svgMinuteHand);\r\n                    svgGElement.appendChild(svgHourHand);\r\n                 } else\r\n                 {\r\n                    var svgMinuteHand = this.createSVGElement(\"line\", {class: 'minute-hand', x1: 0, y1: 0, x2: 0, y2: -150, stroke: '#8BC34A', 'stroke-width': 2});\r\n                    var svgHourHand = this.createSVGElement(\"line\", {class: 'hour-hand', x1: 0, y1: 0, x2: 0, y2: hl, stroke: '#bdbdbd', 'stroke-width': 8});\r\n\r\n                    svgGElement.appendChild(svgHourHand);\r\n                    svgGElement.appendChild(svgMinuteHand);\r\n                 }\r\n\r\n                 svgGElement.appendChild(svgClockCenter)\r\n\r\n                 svgElement.appendChild(svgGElement)\r\n\r\n                 this.$dtpElement.find(\"#dtp-svg-clock\").empty();\r\n                 this.$dtpElement.find(\"#dtp-svg-clock\")[0].appendChild(svgElement);\r\n\r\n                 this.animateHands();\r\n\r\n                 return svgGElement;\r\n              },\r\n              createSVGElement: function (tag, attrs)\r\n              {\r\n                 var el = document.createElementNS('http://www.w3.org/2000/svg', tag);\r\n                 for (var k in attrs)\r\n                 {\r\n                    el.setAttribute(k, attrs[k]);\r\n                 }\r\n                 return el;\r\n              },\r\n              isAfterMinDate: function (date, checkHour, checkMinute)\r\n              {\r\n                 var _return = true;\r\n\r\n                 if (typeof (this.minDate) !== 'undefined' && this.minDate !== null)\r\n                 {\r\n                    var _minDate = moment(this.minDate);\r\n                    var _date = moment(date);\r\n\r\n                    if (!checkHour && !checkMinute)\r\n                    {\r\n                       _minDate.hour(0);\r\n                       _minDate.minute(0);\r\n\r\n                       _date.hour(0);\r\n                       _date.minute(0);\r\n                    }\r\n\r\n                    _minDate.second(0);\r\n                    _date.second(0);\r\n                    _minDate.millisecond(0);\r\n                    _date.millisecond(0);\r\n\r\n                    if (!checkMinute)\r\n                    {\r\n                       _date.minute(0);\r\n                       _minDate.minute(0);\r\n\r\n                       _return = (parseInt(_date.format(\"X\")) >= parseInt(_minDate.format(\"X\")));\r\n                    } else\r\n                    {\r\n                       _return = (parseInt(_date.format(\"X\")) >= parseInt(_minDate.format(\"X\")));\r\n                    }\r\n                 }\r\n\r\n                 return _return;\r\n              },\r\n              isBeforeMaxDate: function (date, checkTime, checkMinute)\r\n              {\r\n                 var _return = true;\r\n\r\n                 if (typeof (this.maxDate) !== 'undefined' && this.maxDate !== null)\r\n                 {\r\n                    var _maxDate = moment(this.maxDate);\r\n                    var _date = moment(date);\r\n\r\n                    if (!checkTime && !checkMinute)\r\n                    {\r\n                       _maxDate.hour(0);\r\n                       _maxDate.minute(0);\r\n\r\n                       _date.hour(0);\r\n                       _date.minute(0);\r\n                    }\r\n\r\n                    _maxDate.second(0);\r\n                    _date.second(0);\r\n                    _maxDate.millisecond(0);\r\n                    _date.millisecond(0);\r\n\r\n                    if (!checkMinute)\r\n                    {\r\n                       _date.minute(0);\r\n                       _maxDate.minute(0);\r\n\r\n                       _return = (parseInt(_date.format(\"X\")) <= parseInt(_maxDate.format(\"X\")));\r\n                    } else\r\n                    {\r\n                       _return = (parseInt(_date.format(\"X\")) <= parseInt(_maxDate.format(\"X\")));\r\n                    }\r\n                 }\r\n\r\n                 return _return;\r\n              },\r\n              rotateElement: function (el, deg)\r\n              {\r\n                 $(el).css\r\n                         ({\r\n                            WebkitTransform: 'rotate(' + deg + 'deg)',\r\n                            '-moz-transform': 'rotate(' + deg + 'deg)'\r\n                         });\r\n              },\r\n              showDate: function (date)\r\n              {\r\n                 if (date)\r\n                 {\r\n                    this.$dtpElement.find('.dtp-actual-day').html(date.locale(this.params.lang).format('dddd'));\r\n                    this.$dtpElement.find('.dtp-actual-month').html(date.locale(this.params.lang).format('MMM').toUpperCase());\r\n                    this.$dtpElement.find('.dtp-actual-num').html(date.locale(this.params.lang).format('DD'));\r\n                    this.$dtpElement.find('.dtp-actual-year').html(date.locale(this.params.lang).format('YYYY'));\r\n                 }\r\n              },\r\n              showTime: function (date)\r\n              {\r\n                 if (date)\r\n                 {\r\n                    var minutes = date.minute();\r\n                    var content = ((this.params.shortTime) ? date.format('hh') : date.format('HH')) + ':' + ((minutes.toString().length == 2) ? minutes : '0' + minutes) + ((this.params.shortTime) ? ' ' + date.format('A') : '');\r\n\r\n                    if (this.params.date)\r\n                       this.$dtpElement.find('.dtp-actual-time').html(content);\r\n                    else\r\n                    {\r\n                       if (this.params.shortTime)\r\n                          this.$dtpElement.find('.dtp-actual-day').html(date.format('A'));\r\n                       else\r\n                          this.$dtpElement.find('.dtp-actual-day').html('&nbsp;');\r\n\r\n                       this.$dtpElement.find('.dtp-actual-maxtime').html(content);\r\n                    }\r\n                 }\r\n              },\r\n              selectDate: function (date)\r\n              {\r\n                 if (date)\r\n                 {\r\n                    this.currentDate.date(date);\r\n\r\n                    this.showDate(this.currentDate);\r\n                    this.$element.trigger('dateSelected', this.currentDate);\r\n                 }\r\n              },\r\n              generateCalendar: function (date)\r\n              {\r\n                 var _calendar = {};\r\n\r\n                 if (date !== null)\r\n                 {\r\n                    var startOfMonth = moment(date).locale(this.params.lang).startOf('month');\r\n                    var endOfMonth = moment(date).locale(this.params.lang).endOf('month');\r\n\r\n                    var iNumDay = startOfMonth.format('d');\r\n\r\n                    _calendar.week = this.days;\r\n                    _calendar.days = [];\r\n\r\n                    for (var i = startOfMonth.date(); i <= endOfMonth.date(); i++)\r\n                    {\r\n                       if (i === startOfMonth.date())\r\n                       {\r\n                          var iWeek = _calendar.week.indexOf(iNumDay.toString());\r\n                          if (iWeek > 0)\r\n                          {\r\n                             for (var x = 0; x < iWeek; x++)\r\n                             {\r\n                                _calendar.days.push(0);\r\n                             }\r\n                          }\r\n                       }\r\n                       _calendar.days.push(moment(startOfMonth).locale(this.params.lang).date(i));\r\n                    }\r\n                 }\r\n\r\n                 return _calendar;\r\n              },\r\n              constructHTMLCalendar: function (date, calendar)\r\n              {\r\n                 var _template = \"\";\r\n\r\n                 _template += '<div class=\"dtp-picker-month\">' + date.locale(this.params.lang).format('MMMM YYYY') + '</div>';\r\n                 _template += '<table class=\"table dtp-picker-days\"><thead>';\r\n                 for (var i = 0; i < calendar.week.length; i++)\r\n                 {\r\n                    _template += '<th>' + moment(parseInt(calendar.week[i]), \"d\").locale(this.params.lang).format(\"dd\").substring(0, 1) + '</th>';\r\n                 }\r\n\r\n                 _template += '</thead>';\r\n                 _template += '<tbody><tr>';\r\n\r\n                 for (var i = 0; i < calendar.days.length; i++)\r\n                 {\r\n                    if (i % 7 == 0)\r\n                       _template += '</tr><tr>';\r\n                    _template += '<td data-date=\"' + moment(calendar.days[i]).locale(this.params.lang).format(\"D\") + '\">';\r\n                    if (calendar.days[i] != 0)\r\n                    {\r\n                        if (this.isBeforeMaxDate(moment(calendar.days[i]), false, false) === false\r\n                            || this.isAfterMinDate(moment(calendar.days[i]), false, false) === false\r\n                            || this.params.disabledDays.indexOf(calendar.days[i].isoWeekday()) !== -1)\r\n                        {\r\n                            _template += '<span class=\"dtp-select-day\">' + moment(calendar.days[i]).locale(this.params.lang).format(\"DD\") + '</span>';\r\n                        } else\r\n                        {\r\n                            if (moment(calendar.days[i]).locale(this.params.lang).format(\"DD\") === moment(this.currentDate).locale(this.params.lang).format(\"DD\"))\r\n                            {\r\n                                _template += '<a href=\"javascript:void(0);\" class=\"dtp-select-day selected\">' + moment(calendar.days[i]).locale(this.params.lang).format(\"DD\") + '</a>';\r\n                            } else\r\n                            {\r\n                                _template += '<a href=\"javascript:void(0);\" class=\"dtp-select-day\">' + moment(calendar.days[i]).locale(this.params.lang).format(\"DD\") + '</a>';\r\n                            }\r\n                        }\r\n\r\n                        _template += '</td>';\r\n                    }\r\n                 }\r\n                 _template += '</tr></tbody></table>';\r\n\r\n                 return _template;\r\n              },\r\n              setName: function ()\r\n              {\r\n                 var text = \"\";\r\n                 var possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\r\n\r\n                 for (var i = 0; i < 5; i++)\r\n                 {\r\n                    text += possible.charAt(Math.floor(Math.random() * possible.length));\r\n                 }\r\n\r\n                 return text;\r\n              },\r\n              isPM: function ()\r\n              {\r\n                 return this.$dtpElement.find('a.dtp-meridien-pm').hasClass('selected');\r\n              },\r\n              setElementValue: function ()\r\n              {\r\n                 this.$element.trigger('beforeChange', this.currentDate);\r\n                 if (typeof ($.material) !== 'undefined')\r\n                 {\r\n                    this.$element.removeClass('empty');\r\n                 }\r\n                 this.$element.val(moment(this.currentDate).locale(this.params.lang).format(this.params.format));\r\n                 this.$element.trigger('change', this.currentDate);\r\n              },\r\n              toggleButtons: function (date)\r\n              {\r\n                 if (date && date.isValid())\r\n                 {\r\n                    var startOfMonth = moment(date).locale(this.params.lang).startOf('month');\r\n                    var endOfMonth = moment(date).locale(this.params.lang).endOf('month');\r\n\r\n                    if (!this.isAfterMinDate(startOfMonth, false, false))\r\n                    {\r\n                       this.$dtpElement.find('a.dtp-select-month-before').addClass('invisible');\r\n                    } else\r\n                    {\r\n                       this.$dtpElement.find('a.dtp-select-month-before').removeClass('invisible');\r\n                    }\r\n\r\n                    if (!this.isBeforeMaxDate(endOfMonth, false, false))\r\n                    {\r\n                       this.$dtpElement.find('a.dtp-select-month-after').addClass('invisible');\r\n                    } else\r\n                    {\r\n                       this.$dtpElement.find('a.dtp-select-month-after').removeClass('invisible');\r\n                    }\r\n\r\n                    var startOfYear = moment(date).locale(this.params.lang).startOf('year');\r\n                    var endOfYear = moment(date).locale(this.params.lang).endOf('year');\r\n\r\n                    if (!this.isAfterMinDate(startOfYear, false, false))\r\n                    {\r\n                       this.$dtpElement.find('a.dtp-select-year-before').addClass('invisible');\r\n                    } else\r\n                    {\r\n                       this.$dtpElement.find('a.dtp-select-year-before').removeClass('invisible');\r\n                    }\r\n\r\n                    if (!this.isBeforeMaxDate(endOfYear, false, false))\r\n                    {\r\n                       this.$dtpElement.find('a.dtp-select-year-after').addClass('invisible');\r\n                    } else\r\n                    {\r\n                       this.$dtpElement.find('a.dtp-select-year-after').removeClass('invisible');\r\n                    }\r\n                 }\r\n              },\r\n              toggleTime: function (value, isHours)\r\n              {\r\n                 var result = false;\r\n\r\n                 if (isHours)\r\n                 {\r\n                    var _date = moment(this.currentDate);\r\n                    _date.hour(this.convertHours(value)).minute(0).second(0);\r\n\r\n                    result = !(this.isAfterMinDate(_date, true, false) === false || this.isBeforeMaxDate(_date, true, false) === false);\r\n                 } else\r\n                 {\r\n                    var _date = moment(this.currentDate);\r\n                    _date.minute(value).second(0);\r\n\r\n                    result = !(this.isAfterMinDate(_date, true, true) === false || this.isBeforeMaxDate(_date, true, true) === false);\r\n                 }\r\n\r\n                 return result;\r\n              },\r\n              _attachEvent: function (el, ev, fn)\r\n              {\r\n                 el.on(ev, null, null, fn);\r\n                 this._attachedEvents.push([el, ev, fn]);\r\n              },\r\n              _detachEvents: function ()\r\n              {\r\n                 for (var i = this._attachedEvents.length - 1; i >= 0; i--)\r\n                 {\r\n                    this._attachedEvents[i][0].off(this._attachedEvents[i][1], this._attachedEvents[i][2]);\r\n                    this._attachedEvents.splice(i, 1);\r\n                 }\r\n              },\r\n              _fireCalendar: function ()\r\n              {\r\n                 this.currentView = 0;\r\n                 this.$element.blur();\r\n\r\n                 this.initDates();\r\n\r\n                 this.show();\r\n\r\n                 if (this.params.date)\r\n                 {\r\n                    this.$dtpElement.find('.dtp-date').removeClass('hidden');\r\n                    this.initDate();\r\n                 } else\r\n                 {\r\n                    if (this.params.time)\r\n                    {\r\n                       this.$dtpElement.find('.dtp-time').removeClass('hidden');\r\n                       this.initHours();\r\n                    }\r\n                 }\r\n              },\r\n              _onBackgroundClick: function (e)\r\n              {\r\n                 e.stopPropagation();\r\n                 this.hide();\r\n              },\r\n              _onElementClick: function (e)\r\n              {\r\n                 e.stopPropagation();\r\n              },\r\n              _onKeydown: function (e)\r\n              {\r\n                 if (e.which === 27)\r\n                 {\r\n                    this.hide();\r\n                 }\r\n              },\r\n              _onCloseClick: function ()\r\n              {\r\n                 this.hide();\r\n              },\r\n              _onClearClick: function ()\r\n              {\r\n                 this.currentDate = null;\r\n                 this.$element.trigger('beforeChange', this.currentDate);\r\n                 this.hide();\r\n                 if (typeof ($.material) !== 'undefined')\r\n                 {\r\n                    this.$element.addClass('empty');\r\n                 }\r\n                 this.$element.val('');\r\n                 this.$element.trigger('change', this.currentDate);\r\n              },\r\n              _onNowClick: function ()\r\n              {\r\n                 this.currentDate = moment();\r\n\r\n                 if (this.params.date === true)\r\n                 {\r\n                    this.showDate(this.currentDate);\r\n\r\n                    if (this.currentView === 0)\r\n                    {\r\n                       this.initDate();\r\n                    }\r\n                 }\r\n\r\n                 if (this.params.time === true)\r\n                 {\r\n                    this.showTime(this.currentDate);\r\n\r\n                    switch (this.currentView)\r\n                    {\r\n                       case 1 :\r\n                          this.initHours();\r\n                          break;\r\n                       case 2 :\r\n                          this.initMinutes();\r\n                          break;\r\n                    }\r\n\r\n                    this.animateHands();\r\n                 }\r\n              },\r\n              _onOKClick: function ()\r\n              {\r\n                 switch (this.currentView)\r\n                 {\r\n                    case 0:\r\n                       if (this.params.time === true)\r\n                       {\r\n                          this.initHours();\r\n                       } else\r\n                       {\r\n                          this.setElementValue();\r\n                          this.hide();\r\n                       }\r\n                       break;\r\n                    case 1:\r\n                       this.initMinutes();\r\n                       break;\r\n                    case 2:\r\n                       this.setElementValue();\r\n                       this.hide();\r\n                       break;\r\n                 }\r\n              },\r\n              _onCancelClick: function ()\r\n              {\r\n                 if (this.params.time)\r\n                 {\r\n                    switch (this.currentView)\r\n                    {\r\n                       case 0:\r\n                          this.hide();\r\n                          break;\r\n                       case 1:\r\n                          if (this.params.date)\r\n                          {\r\n                             this.initDate();\r\n                          } else\r\n                          {\r\n                             this.hide();\r\n                          }\r\n                          break;\r\n                       case 2:\r\n                          this.initHours();\r\n                          break;\r\n                    }\r\n                 } else\r\n                 {\r\n                    this.hide();\r\n                 }\r\n              },\r\n              _onMonthBeforeClick: function ()\r\n              {\r\n                 this.currentDate.subtract(1, 'months');\r\n                 this.initDate(this.currentDate);\r\n                  this._closeYearPicker();\r\n              },\r\n              _onMonthAfterClick: function ()\r\n              {\r\n                 this.currentDate.add(1, 'months');\r\n                 this.initDate(this.currentDate);\r\n                  this._closeYearPicker();\r\n              },\r\n              _onYearBeforeClick: function ()\r\n              {\r\n                 this.currentDate.subtract(1, 'years');\r\n                 this.initDate(this.currentDate);\r\n                  this._closeYearPicker();\r\n              },\r\n              _onYearAfterClick: function ()\r\n              {\r\n                 this.currentDate.add(1, 'years');\r\n                 this.initDate(this.currentDate);\r\n                  this._closeYearPicker();\r\n              },\r\n               refreshYearItems:function () {\r\n                  var curYear=this.currentDate.year(),midYear=this.midYear;\r\n                   var minYear=1850;\r\n                   if (typeof (this.minDate) !== 'undefined' && this.minDate !== null){\r\n                       minYear=moment(this.minDate).year();\r\n                   }\r\n\r\n                   var maxYear=2200;\r\n                   if (typeof (this.maxDate) !== 'undefined' && this.maxDate !== null){\r\n                       maxYear=moment(this.maxDate).year();\r\n                   }\r\n\r\n                   this.$dtpElement.find(\".dtp-picker-year .invisible\").removeClass(\"invisible\");\r\n                   this.$dtpElement.find(\".year-picker-item\").each(function (i, el) {\r\n                       var newYear = midYear - 3 + i;\r\n                       $(el).attr(\"data-year\", newYear).text(newYear).data(\"year\", newYear);\r\n                       if (curYear == newYear) {\r\n                           $(el).addClass(\"active\");\r\n                       } else {\r\n                           $(el).removeClass(\"active\");\r\n                       }\r\n                       if(newYear<minYear || newYear>maxYear){\r\n                           $(el).addClass(\"invisible\")\r\n                       }\r\n                   });\r\n                   if(minYear>=midYear-3){\r\n                       this.$dtpElement.find(\".dtp-select-year-range.before\").addClass('invisible');\r\n                   }\r\n                   if(maxYear<=midYear+3){\r\n                       this.$dtpElement.find(\".dtp-select-year-range.after\").addClass('invisible');\r\n                   }\r\n\r\n                   this.$dtpElement.find(\".dtp-select-year-range\").data(\"mid\", midYear);\r\n               },\r\n               _onActualYearClick:function(){\r\n                  if(this.params.year){\r\n                      if(this.$dtpElement.find('.dtp-picker-year.hidden').length>0) {\r\n                          this.$dtpElement.find('.dtp-picker-datetime').addClass(\"hidden\");\r\n                          this.$dtpElement.find('.dtp-picker-calendar').addClass(\"hidden\");\r\n                          this.$dtpElement.find('.dtp-picker-year').removeClass(\"hidden\");\r\n                          this.midYear = this.currentDate.year();\r\n                          this.refreshYearItems();\r\n                      }else{\r\n                          this._closeYearPicker();\r\n                      }\r\n                  }\r\n               },\r\n               _onYearRangeBeforeClick:function(){\r\n                   this.midYear-=7;\r\n                   this.refreshYearItems();\r\n               },\r\n               _onYearRangeAfterClick:function(){\r\n                   this.midYear+=7;\r\n                   this.refreshYearItems();\r\n               },\r\n               _onYearItemClick:function (e) {\r\n                   var newYear = $(e.currentTarget).data('year');\r\n                   var oldYear = this.currentDate.year();\r\n                   var diff = newYear - oldYear;\r\n                   this.currentDate.add(diff, 'years');\r\n                   this.initDate(this.currentDate);\r\n\r\n                   this._closeYearPicker();\r\n                   this.$element.trigger(\"yearSelected\",this.currentDate);\r\n               },\r\n               _closeYearPicker:function(){\r\n                   this.$dtpElement.find('.dtp-picker-calendar').removeClass(\"hidden\");\r\n                   this.$dtpElement.find('.dtp-picker-year').addClass(\"hidden\");\r\n               },\r\n               enableYearPicker:function () {\r\n                    this.params.year=true;\r\n                    this.$dtpElement.find(\".dtp-actual-year\").reomveClass(\"disabled\");\r\n               },\r\n               disableYearPicker:function () {\r\n                   this.params.year=false;\r\n                   this.$dtpElement.find(\".dtp-actual-year\").addClass(\"disabled\");\r\n                   this._closeYearPicker();\r\n               },\r\n              _onSelectDate: function (e)\r\n              {\r\n                 this.$dtpElement.find('a.dtp-select-day').removeClass('selected');\r\n                 $(e.currentTarget).addClass('selected');\r\n\r\n                 this.selectDate($(e.currentTarget).parent().data(\"date\"));\r\n\r\n                 if (this.params.switchOnClick === true && this.params.time === true)\r\n                    setTimeout(this.initHours.bind(this), 200);\r\n\r\n                 if(this.params.switchOnClick === true && this.params.time === false) {\r\n                    setTimeout(this._onOKClick.bind(this), 200);\r\n                 }\r\n\r\n              },\r\n              _onSelectHour: function (e)\r\n              {\r\n                 if (!$(e.target).hasClass('disabled'))\r\n                 {\r\n                    var value = $(e.target).data('hour');\r\n                    var parent = $(e.target).parent();\r\n\r\n                    var h = parent.find('.dtp-select-hour');\r\n                    for (var i = 0; i < h.length; i++)\r\n                    {\r\n                       $(h[i]).attr('fill', 'transparent');\r\n                    }\r\n                    var th = parent.find('.dtp-select-hour-text');\r\n                    for (var i = 0; i < th.length; i++)\r\n                    {\r\n                       $(th[i]).attr('fill', '#000');\r\n                    }\r\n\r\n                    $(parent.find('#h-' + value)).attr('fill', '#8BC34A');\r\n                    $(parent.find('#th-' + value)).attr('fill', '#fff');\r\n\r\n                    this.currentDate.hour(parseInt(value));\r\n\r\n                    if (this.params.shortTime === true && this.isPM())\r\n                    {\r\n                       this.currentDate.add(12, 'hours');\r\n                    }\r\n\r\n                    this.showTime(this.currentDate);\r\n\r\n                    this.animateHands();\r\n\r\n                    if (this.params.switchOnClick === true)\r\n                       setTimeout(this.initMinutes.bind(this), 200);\r\n                 }\r\n              },\r\n              _onSelectMinute: function (e)\r\n              {\r\n                 if (!$(e.target).hasClass('disabled'))\r\n                 {\r\n                    var value = $(e.target).data('minute');\r\n                    var parent = $(e.target).parent();\r\n\r\n                    var m = parent.find('.dtp-select-minute');\r\n                    for (var i = 0; i < m.length; i++)\r\n                    {\r\n                       $(m[i]).attr('fill', 'transparent');\r\n                    }\r\n                    var tm = parent.find('.dtp-select-minute-text');\r\n                    for (var i = 0; i < tm.length; i++)\r\n                    {\r\n                       $(tm[i]).attr('fill', '#000');\r\n                    }\r\n\r\n                    $(parent.find('#m-' + value)).attr('fill', '#8BC34A');\r\n                    $(parent.find('#tm-' + value)).attr('fill', '#fff');\r\n\r\n                    this.currentDate.minute(parseInt(value));\r\n                    this.showTime(this.currentDate);\r\n\r\n                    this.animateHands();\r\n\r\n                    if (this.params.switchOnClick === true)\r\n                       setTimeout(function ()\r\n                       {\r\n                          this.setElementValue();\r\n                          this.hide();\r\n                       }.bind(this), 200);\r\n                 }\r\n              },\r\n              _onSelectAM: function (e)\r\n              {\r\n                 $('.dtp-actual-meridien').find('a').removeClass('selected');\r\n                 $(e.currentTarget).addClass('selected');\r\n\r\n                 if (this.currentDate.hour() >= 12)\r\n                 {\r\n                    if (this.currentDate.subtract(12, 'hours'))\r\n                       this.showTime(this.currentDate);\r\n                 }\r\n                 this.toggleTime((this.currentView === 1));\r\n              },\r\n              _onSelectPM: function (e)\r\n              {\r\n                 $('.dtp-actual-meridien').find('a').removeClass('selected');\r\n                 $(e.currentTarget).addClass('selected');\r\n\r\n                 if (this.currentDate.hour() < 12)\r\n                 {\r\n                    if (this.currentDate.add(12, 'hours'))\r\n                       this.showTime(this.currentDate);\r\n                 }\r\n                 this.toggleTime((this.currentView === 1));\r\n              },\r\n              _hideCalendar: function() {\r\n                 this.$dtpElement.find('.dtp-picker-calendar').addClass('hidden');\r\n              },\r\n              convertHours: function (h)\r\n              {\r\n                 var _return = h;\r\n\r\n                 if (this.params.shortTime === true)\r\n                 {\r\n                    if ((h < 12) && this.isPM())\r\n                    {\r\n                       _return += 12;\r\n                    }\r\n                 }\r\n\r\n                 return _return;\r\n              },\r\n              setDate: function (date)\r\n              {\r\n                 this.params.currentDate = date;\r\n                 this.initDates();\r\n              },\r\n              setMinDate: function (date)\r\n              {\r\n                 this.params.minDate = date;\r\n                 this.initDates();\r\n              },\r\n              setMaxDate: function (date)\r\n              {\r\n                 this.params.maxDate = date;\r\n                 this.initDates();\r\n              },\r\n              destroy: function ()\r\n              {\r\n                 this._detachEvents();\r\n                 this.$dtpElement.remove();\r\n              },\r\n              show: function ()\r\n              {\r\n                 this.$dtpElement.removeClass('hidden');\r\n                 this._attachEvent($(window), 'keydown', this._onKeydown.bind(this));\r\n                 this._centerBox();\r\n                 this.$element.trigger('open');\r\n                 if (this.params.monthPicker === true)\r\n                 {\r\n                    this._hideCalendar();\r\n                 }\r\n              },\r\n              hide: function ()\r\n              {\r\n                 $(window).off('keydown', null, null, this._onKeydown.bind(this));\r\n                 this.$dtpElement.addClass('hidden');\r\n                 this.$element.trigger('close');\r\n              },\r\n              _centerBox: function ()\r\n              {\r\n                 var h = (this.$dtpElement.height() - this.$dtpElement.find('.dtp-content').height()) / 2;\r\n                 this.$dtpElement.find('.dtp-content').css('marginLeft', -(this.$dtpElement.find('.dtp-content').width() / 2) + 'px');\r\n                 this.$dtpElement.find('.dtp-content').css('top', h + 'px');\r\n              },\r\n              enableDays: function ()\r\n              {\r\n                 var enableDays = this.params.enableDays;\r\n                 if (enableDays) {\r\n                    $(\".dtp-picker-days tbody tr td\").each(function () {\r\n                       if (!(($.inArray($(this).index(), enableDays)) >= 0)) {\r\n                          $(this).find('a').css({\r\n                             \"background\": \"#e3e3e3\",\r\n                             \"cursor\": \"no-drop\",\r\n                             \"opacity\": \"0.5\"\r\n                          }).off(\"click\");\r\n                       }\r\n                    });\r\n                 }\r\n              }\r\n\r\n           };\r\n})(jQuery, moment);\r\n\n\n//# sourceURL=webpack:///./node_modules/bootstrap-material-datetimepicker/js/bootstrap-material-datetimepicker.js?");

/***/ })

/******/ });
});;