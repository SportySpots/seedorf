
(function(r,f) {
	var a=f();
	if(typeof a!=='object')return;
	var e=[typeof module==='object'&&typeof module.exports==='object'?module.exports:null,typeof window!=='undefined'?window:null,r&&r!==window?r:null];
	for(var i in a){e[0]&&(e[0][i]=a[i]);e[1]&&i!=='__esModule'&&(e[1][i] = a[i]);e[2]&&(e[2][i]=a[i]);}
})(this,function(){
	return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./libs/bootstrap-slider/bootstrap-slider.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./libs/bootstrap-slider/bootstrap-slider.js":
/*!***************************************************!*\
  !*** ./libs/bootstrap-slider/bootstrap-slider.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("__webpack_require__(/*! ../../node_modules/bootstrap-slider/src/js/bootstrap-slider.js */ \"./node_modules/bootstrap-slider/src/js/bootstrap-slider.js\");\n\n//# sourceURL=webpack:///./libs/bootstrap-slider/bootstrap-slider.js?");

/***/ }),

/***/ "./node_modules/bootstrap-slider/src/js/bootstrap-slider.js":
/*!******************************************************************!*\
  !*** ./node_modules/bootstrap-slider/src/js/bootstrap-slider.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/*! =========================================================\n * bootstrap-slider.js\n *\n * Maintainers:\n *\t\tKyle Kemp\n *\t\t\t- Twitter: @seiyria\n *\t\t\t- Github:  seiyria\n *\t\tRohit Kalkur\n *\t\t\t- Twitter: @Rovolutionary\n *\t\t\t- Github:  rovolution\n *\n * =========================================================\n *\n * bootstrap-slider is released under the MIT License\n * Copyright (c) 2017 Kyle Kemp, Rohit Kalkur, and contributors\n *\n * Permission is hereby granted, free of charge, to any person\n * obtaining a copy of this software and associated documentation\n * files (the \"Software\"), to deal in the Software without\n * restriction, including without limitation the rights to use,\n * copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following\n * conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n * OTHER DEALINGS IN THE SOFTWARE.\n *\n * ========================================================= */\n\n/**\n * Bridget makes jQuery widgets\n * v1.0.1\n * MIT license\n */\nvar windowIsDefined = (typeof window === \"undefined\" ? \"undefined\" : _typeof(window)) === \"object\";\n\n(function (factory) {\n  if (true) {\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! jquery */ \"jquery\")], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else { var jQuery; }\n})(function ($) {\n  // Constants\n  var NAMESPACE_MAIN = 'slider';\n  var NAMESPACE_ALTERNATE = 'bootstrapSlider'; // Polyfill console methods\n\n  if (windowIsDefined && !window.console) {\n    window.console = {};\n  }\n\n  if (windowIsDefined && !window.console.log) {\n    window.console.log = function () {};\n  }\n\n  if (windowIsDefined && !window.console.warn) {\n    window.console.warn = function () {};\n  } // Reference to Slider constructor\n\n\n  var Slider;\n\n  (function ($) {\n    'use strict'; // -------------------------- utils -------------------------- //\n\n    var slice = Array.prototype.slice;\n\n    function noop() {} // -------------------------- definition -------------------------- //\n\n\n    function defineBridget($) {\n      // bail if no jQuery\n      if (!$) {\n        return;\n      } // -------------------------- addOptionMethod -------------------------- //\n\n      /**\n       * adds option method -> $().plugin('option', {...})\n       * @param {Function} PluginClass - constructor class\n       */\n\n\n      function addOptionMethod(PluginClass) {\n        // don't overwrite original option method\n        if (PluginClass.prototype.option) {\n          return;\n        } // option setter\n\n\n        PluginClass.prototype.option = function (opts) {\n          // bail out if not an object\n          if (!$.isPlainObject(opts)) {\n            return;\n          }\n\n          this.options = $.extend(true, this.options, opts);\n        };\n      } // -------------------------- plugin bridge -------------------------- //\n      // helper function for logging errors\n      // $.error breaks jQuery chaining\n\n\n      var logError = typeof console === 'undefined' ? noop : function (message) {\n        console.error(message);\n      };\n      /**\n       * jQuery plugin bridge, access methods like $elem.plugin('method')\n       * @param {String} namespace - plugin name\n       * @param {Function} PluginClass - constructor class\n       */\n\n      function bridge(namespace, PluginClass) {\n        // add to jQuery fn namespace\n        $.fn[namespace] = function (options) {\n          if (typeof options === 'string') {\n            // call plugin method when first argument is a string\n            // get arguments for method\n            var args = slice.call(arguments, 1);\n\n            for (var i = 0, len = this.length; i < len; i++) {\n              var elem = this[i];\n              var instance = $.data(elem, namespace);\n\n              if (!instance) {\n                logError(\"cannot call methods on \" + namespace + \" prior to initialization; \" + \"attempted to call '\" + options + \"'\");\n                continue;\n              }\n\n              if (!$.isFunction(instance[options]) || options.charAt(0) === '_') {\n                logError(\"no such method '\" + options + \"' for \" + namespace + \" instance\");\n                continue;\n              } // trigger method with arguments\n\n\n              var returnValue = instance[options].apply(instance, args); // break look and return first value if provided\n\n              if (returnValue !== undefined && returnValue !== instance) {\n                return returnValue;\n              }\n            } // return this if no return value\n\n\n            return this;\n          } else {\n            var objects = this.map(function () {\n              var instance = $.data(this, namespace);\n\n              if (instance) {\n                // apply options & init\n                instance.option(options);\n\n                instance._init();\n              } else {\n                // initialize new instance\n                instance = new PluginClass(this, options);\n                $.data(this, namespace, instance);\n              }\n\n              return $(this);\n            });\n\n            if (!objects || objects.length > 1) {\n              return objects;\n            } else {\n              return objects[0];\n            }\n          }\n        };\n      } // -------------------------- bridget -------------------------- //\n\n      /**\n       * converts a Prototypical class into a proper jQuery plugin\n       *   the class must have a ._init method\n       * @param {String} namespace - plugin name, used in $().pluginName\n       * @param {Function} PluginClass - constructor class\n       */\n\n\n      $.bridget = function (namespace, PluginClass) {\n        addOptionMethod(PluginClass);\n        bridge(namespace, PluginClass);\n      };\n\n      return $.bridget;\n    } // get jquery from browser global\n\n\n    defineBridget($);\n  })($);\n  /*************************************************\n  \t\t\tBOOTSTRAP-SLIDER SOURCE CODE\n  \t**************************************************/\n\n\n  (function ($) {\n    var ErrorMsgs = {\n      formatInvalidInputErrorMsg: function formatInvalidInputErrorMsg(input) {\n        return \"Invalid input value '\" + input + \"' passed in\";\n      },\n      callingContextNotSliderInstance: \"Calling context element does not have instance of Slider bound to it. Check your code to make sure the JQuery object returned from the call to the slider() initializer is calling the method\"\n    };\n    var SliderScale = {\n      linear: {\n        toValue: function toValue(percentage) {\n          var rawValue = percentage / 100 * (this.options.max - this.options.min);\n          var shouldAdjustWithBase = true;\n\n          if (this.options.ticks_positions.length > 0) {\n            var minv,\n                maxv,\n                minp,\n                maxp = 0;\n\n            for (var i = 1; i < this.options.ticks_positions.length; i++) {\n              if (percentage <= this.options.ticks_positions[i]) {\n                minv = this.options.ticks[i - 1];\n                minp = this.options.ticks_positions[i - 1];\n                maxv = this.options.ticks[i];\n                maxp = this.options.ticks_positions[i];\n                break;\n              }\n            }\n\n            var partialPercentage = (percentage - minp) / (maxp - minp);\n            rawValue = minv + partialPercentage * (maxv - minv);\n            shouldAdjustWithBase = false;\n          }\n\n          var adjustment = shouldAdjustWithBase ? this.options.min : 0;\n          var value = adjustment + Math.round(rawValue / this.options.step) * this.options.step;\n\n          if (value < this.options.min) {\n            return this.options.min;\n          } else if (value > this.options.max) {\n            return this.options.max;\n          } else {\n            return value;\n          }\n        },\n        toPercentage: function toPercentage(value) {\n          if (this.options.max === this.options.min) {\n            return 0;\n          }\n\n          if (this.options.ticks_positions.length > 0) {\n            var minv,\n                maxv,\n                minp,\n                maxp = 0;\n\n            for (var i = 0; i < this.options.ticks.length; i++) {\n              if (value <= this.options.ticks[i]) {\n                minv = i > 0 ? this.options.ticks[i - 1] : 0;\n                minp = i > 0 ? this.options.ticks_positions[i - 1] : 0;\n                maxv = this.options.ticks[i];\n                maxp = this.options.ticks_positions[i];\n                break;\n              }\n            }\n\n            if (i > 0) {\n              var partialPercentage = (value - minv) / (maxv - minv);\n              return minp + partialPercentage * (maxp - minp);\n            }\n          }\n\n          return 100 * (value - this.options.min) / (this.options.max - this.options.min);\n        }\n      },\n      logarithmic: {\n        /* Based on http://stackoverflow.com/questions/846221/logarithmic-slider */\n        toValue: function toValue(percentage) {\n          var offset = 1 - this.options.min;\n          var min = Math.log(this.options.min + offset);\n          var max = Math.log(this.options.max + offset);\n          var value = Math.exp(min + (max - min) * percentage / 100) - offset;\n\n          if (Math.round(value) === max) {\n            return max;\n          }\n\n          value = this.options.min + Math.round((value - this.options.min) / this.options.step) * this.options.step;\n          /* Rounding to the nearest step could exceed the min or\n           * max, so clip to those values. */\n\n          if (value < this.options.min) {\n            return this.options.min;\n          } else if (value > this.options.max) {\n            return this.options.max;\n          } else {\n            return value;\n          }\n        },\n        toPercentage: function toPercentage(value) {\n          if (this.options.max === this.options.min) {\n            return 0;\n          } else {\n            var offset = 1 - this.options.min;\n            var max = Math.log(this.options.max + offset);\n            var min = Math.log(this.options.min + offset);\n            var v = Math.log(value + offset);\n            return 100 * (v - min) / (max - min);\n          }\n        }\n      }\n    };\n    /*************************************************\n    \t\t\t\t\t\tCONSTRUCTOR\n    \t**************************************************/\n\n    Slider = function Slider(element, options) {\n      createNewSlider.call(this, element, options);\n      return this;\n    };\n\n    function createNewSlider(element, options) {\n      /*\n      \tThe internal state object is used to store data about the current 'state' of slider.\n      \tThis includes values such as the `value`, `enabled`, etc...\n      */\n      this._state = {\n        value: null,\n        enabled: null,\n        offset: null,\n        size: null,\n        percentage: null,\n        inDrag: false,\n        over: false\n      }; // The objects used to store the reference to the tick methods if ticks_tooltip is on\n\n      this.ticksCallbackMap = {};\n      this.handleCallbackMap = {};\n\n      if (typeof element === \"string\") {\n        this.element = document.querySelector(element);\n      } else if (element instanceof HTMLElement) {\n        this.element = element;\n      }\n      /*************************************************\n      \t\t\t\t\tProcess Options\n      \t**************************************************/\n\n\n      options = options ? options : {};\n      var optionTypes = Object.keys(this.defaultOptions);\n\n      for (var i = 0; i < optionTypes.length; i++) {\n        var optName = optionTypes[i]; // First check if an option was passed in via the constructor\n\n        var val = options[optName]; // If no data attrib, then check data atrributes\n\n        val = typeof val !== 'undefined' ? val : getDataAttrib(this.element, optName); // Finally, if nothing was specified, use the defaults\n\n        val = val !== null ? val : this.defaultOptions[optName]; // Set all options on the instance of the Slider\n\n        if (!this.options) {\n          this.options = {};\n        }\n\n        this.options[optName] = val;\n      } // Check options.rtl\n\n\n      if (this.options.rtl === 'auto') {\n        this.options.rtl = window.getComputedStyle(this.element).direction === 'rtl';\n      }\n      /*\n      \tValidate `tooltip_position` against 'orientation`\n      \t- if `tooltip_position` is incompatible with orientation, swith it to a default compatible with specified `orientation`\n      \t\t-- default for \"vertical\" -> \"right\", \"left\" if rtl\n      \t\t-- default for \"horizontal\" -> \"top\"\n      */\n\n\n      if (this.options.orientation === \"vertical\" && (this.options.tooltip_position === \"top\" || this.options.tooltip_position === \"bottom\")) {\n        if (this.options.rtl) {\n          this.options.tooltip_position = \"left\";\n        } else {\n          this.options.tooltip_position = \"right\";\n        }\n      } else if (this.options.orientation === \"horizontal\" && (this.options.tooltip_position === \"left\" || this.options.tooltip_position === \"right\")) {\n        this.options.tooltip_position = \"top\";\n      }\n\n      function getDataAttrib(element, optName) {\n        var dataName = \"data-slider-\" + optName.replace(/_/g, '-');\n        var dataValString = element.getAttribute(dataName);\n\n        try {\n          return JSON.parse(dataValString);\n        } catch (err) {\n          return dataValString;\n        }\n      }\n      /*************************************************\n      \t\t\t\t\tCreate Markup\n      \t**************************************************/\n\n\n      var origWidth = this.element.style.width;\n      var updateSlider = false;\n      var parent = this.element.parentNode;\n      var sliderTrackSelection;\n      var sliderTrackLow, sliderTrackHigh;\n      var sliderMinHandle;\n      var sliderMaxHandle;\n\n      if (this.sliderElem) {\n        updateSlider = true;\n      } else {\n        /* Create elements needed for slider */\n        this.sliderElem = document.createElement(\"div\");\n        this.sliderElem.className = \"slider\";\n        /* Create slider track elements */\n\n        var sliderTrack = document.createElement(\"div\");\n        sliderTrack.className = \"slider-track\";\n        sliderTrackLow = document.createElement(\"div\");\n        sliderTrackLow.className = \"slider-track-low\";\n        sliderTrackSelection = document.createElement(\"div\");\n        sliderTrackSelection.className = \"slider-selection\";\n        sliderTrackHigh = document.createElement(\"div\");\n        sliderTrackHigh.className = \"slider-track-high\";\n        sliderMinHandle = document.createElement(\"div\");\n        sliderMinHandle.className = \"slider-handle min-slider-handle\";\n        sliderMinHandle.setAttribute('role', 'slider');\n        sliderMinHandle.setAttribute('aria-valuemin', this.options.min);\n        sliderMinHandle.setAttribute('aria-valuemax', this.options.max);\n        sliderMaxHandle = document.createElement(\"div\");\n        sliderMaxHandle.className = \"slider-handle max-slider-handle\";\n        sliderMaxHandle.setAttribute('role', 'slider');\n        sliderMaxHandle.setAttribute('aria-valuemin', this.options.min);\n        sliderMaxHandle.setAttribute('aria-valuemax', this.options.max);\n        sliderTrack.appendChild(sliderTrackLow);\n        sliderTrack.appendChild(sliderTrackSelection);\n        sliderTrack.appendChild(sliderTrackHigh);\n        /* Create highlight range elements */\n\n        this.rangeHighlightElements = [];\n        var rangeHighlightsOpts = this.options.rangeHighlights;\n\n        if (Array.isArray(rangeHighlightsOpts) && rangeHighlightsOpts.length > 0) {\n          for (var j = 0; j < rangeHighlightsOpts.length; j++) {\n            var rangeHighlightElement = document.createElement(\"div\");\n            var customClassString = rangeHighlightsOpts[j].class || \"\";\n            rangeHighlightElement.className = \"slider-rangeHighlight slider-selection \".concat(customClassString);\n            this.rangeHighlightElements.push(rangeHighlightElement);\n            sliderTrack.appendChild(rangeHighlightElement);\n          }\n        }\n        /* Add aria-labelledby to handle's */\n\n\n        var isLabelledbyArray = Array.isArray(this.options.labelledby);\n\n        if (isLabelledbyArray && this.options.labelledby[0]) {\n          sliderMinHandle.setAttribute('aria-labelledby', this.options.labelledby[0]);\n        }\n\n        if (isLabelledbyArray && this.options.labelledby[1]) {\n          sliderMaxHandle.setAttribute('aria-labelledby', this.options.labelledby[1]);\n        }\n\n        if (!isLabelledbyArray && this.options.labelledby) {\n          sliderMinHandle.setAttribute('aria-labelledby', this.options.labelledby);\n          sliderMaxHandle.setAttribute('aria-labelledby', this.options.labelledby);\n        }\n        /* Create ticks */\n\n\n        this.ticks = [];\n\n        if (Array.isArray(this.options.ticks) && this.options.ticks.length > 0) {\n          this.ticksContainer = document.createElement('div');\n          this.ticksContainer.className = 'slider-tick-container';\n\n          for (i = 0; i < this.options.ticks.length; i++) {\n            var tick = document.createElement('div');\n            tick.className = 'slider-tick';\n\n            if (this.options.ticks_tooltip) {\n              var tickListenerReference = this._addTickListener();\n\n              var enterCallback = tickListenerReference.addMouseEnter(this, tick, i);\n              var leaveCallback = tickListenerReference.addMouseLeave(this, tick);\n              this.ticksCallbackMap[i] = {\n                mouseEnter: enterCallback,\n                mouseLeave: leaveCallback\n              };\n            }\n\n            this.ticks.push(tick);\n            this.ticksContainer.appendChild(tick);\n          }\n\n          sliderTrackSelection.className += \" tick-slider-selection\";\n        }\n\n        this.tickLabels = [];\n\n        if (Array.isArray(this.options.ticks_labels) && this.options.ticks_labels.length > 0) {\n          this.tickLabelContainer = document.createElement('div');\n          this.tickLabelContainer.className = 'slider-tick-label-container';\n\n          for (i = 0; i < this.options.ticks_labels.length; i++) {\n            var label = document.createElement('div');\n            var noTickPositionsSpecified = this.options.ticks_positions.length === 0;\n            var tickLabelsIndex = this.options.reversed && noTickPositionsSpecified ? this.options.ticks_labels.length - (i + 1) : i;\n            label.className = 'slider-tick-label';\n            label.innerHTML = this.options.ticks_labels[tickLabelsIndex];\n            this.tickLabels.push(label);\n            this.tickLabelContainer.appendChild(label);\n          }\n        }\n\n        var createAndAppendTooltipSubElements = function createAndAppendTooltipSubElements(tooltipElem) {\n          var arrow = document.createElement(\"div\");\n          arrow.className = \"tooltip-arrow\";\n          var inner = document.createElement(\"div\");\n          inner.className = \"tooltip-inner\";\n          tooltipElem.appendChild(arrow);\n          tooltipElem.appendChild(inner);\n        };\n        /* Create tooltip elements */\n\n\n        var sliderTooltip = document.createElement(\"div\");\n        sliderTooltip.className = \"tooltip tooltip-main\";\n        sliderTooltip.setAttribute('role', 'presentation');\n        createAndAppendTooltipSubElements(sliderTooltip);\n        var sliderTooltipMin = document.createElement(\"div\");\n        sliderTooltipMin.className = \"tooltip tooltip-min\";\n        sliderTooltipMin.setAttribute('role', 'presentation');\n        createAndAppendTooltipSubElements(sliderTooltipMin);\n        var sliderTooltipMax = document.createElement(\"div\");\n        sliderTooltipMax.className = \"tooltip tooltip-max\";\n        sliderTooltipMax.setAttribute('role', 'presentation');\n        createAndAppendTooltipSubElements(sliderTooltipMax);\n        /* Append components to sliderElem */\n\n        this.sliderElem.appendChild(sliderTrack);\n        this.sliderElem.appendChild(sliderTooltip);\n        this.sliderElem.appendChild(sliderTooltipMin);\n        this.sliderElem.appendChild(sliderTooltipMax);\n\n        if (this.tickLabelContainer) {\n          this.sliderElem.appendChild(this.tickLabelContainer);\n        }\n\n        if (this.ticksContainer) {\n          this.sliderElem.appendChild(this.ticksContainer);\n        }\n\n        this.sliderElem.appendChild(sliderMinHandle);\n        this.sliderElem.appendChild(sliderMaxHandle);\n        /* Append slider element to parent container, right before the original <input> element */\n\n        parent.insertBefore(this.sliderElem, this.element);\n        /* Hide original <input> element */\n\n        this.element.style.display = \"none\";\n      }\n      /* If JQuery exists, cache JQ references */\n\n\n      if ($) {\n        this.$element = $(this.element);\n        this.$sliderElem = $(this.sliderElem);\n      }\n      /*************************************************\n      \t\t\t\t\t\tSetup\n      \t**************************************************/\n\n\n      this.eventToCallbackMap = {};\n      this.sliderElem.id = this.options.id;\n      this.touchCapable = 'ontouchstart' in window || window.DocumentTouch && document instanceof window.DocumentTouch;\n      this.touchX = 0;\n      this.touchY = 0;\n      this.tooltip = this.sliderElem.querySelector('.tooltip-main');\n      this.tooltipInner = this.tooltip.querySelector('.tooltip-inner');\n      this.tooltip_min = this.sliderElem.querySelector('.tooltip-min');\n      this.tooltipInner_min = this.tooltip_min.querySelector('.tooltip-inner');\n      this.tooltip_max = this.sliderElem.querySelector('.tooltip-max');\n      this.tooltipInner_max = this.tooltip_max.querySelector('.tooltip-inner');\n\n      if (SliderScale[this.options.scale]) {\n        this.options.scale = SliderScale[this.options.scale];\n      }\n\n      if (updateSlider === true) {\n        // Reset classes\n        this._removeClass(this.sliderElem, 'slider-horizontal');\n\n        this._removeClass(this.sliderElem, 'slider-vertical');\n\n        this._removeClass(this.sliderElem, 'slider-rtl');\n\n        this._removeClass(this.tooltip, 'hide');\n\n        this._removeClass(this.tooltip_min, 'hide');\n\n        this._removeClass(this.tooltip_max, 'hide'); // Undo existing inline styles for track\n\n\n        [\"left\", \"right\", \"top\", \"width\", \"height\"].forEach(function (prop) {\n          this._removeProperty(this.trackLow, prop);\n\n          this._removeProperty(this.trackSelection, prop);\n\n          this._removeProperty(this.trackHigh, prop);\n        }, this); // Undo inline styles on handles\n\n        [this.handle1, this.handle2].forEach(function (handle) {\n          this._removeProperty(handle, 'left');\n\n          this._removeProperty(handle, 'right');\n\n          this._removeProperty(handle, 'top');\n        }, this); // Undo inline styles and classes on tooltips\n\n        [this.tooltip, this.tooltip_min, this.tooltip_max].forEach(function (tooltip) {\n          this._removeProperty(tooltip, 'left');\n\n          this._removeProperty(tooltip, 'right');\n\n          this._removeProperty(tooltip, 'top');\n\n          this._removeClass(tooltip, 'right');\n\n          this._removeClass(tooltip, 'left');\n\n          this._removeClass(tooltip, 'top');\n        }, this);\n      }\n\n      if (this.options.orientation === 'vertical') {\n        this._addClass(this.sliderElem, 'slider-vertical');\n\n        this.stylePos = 'top';\n        this.mousePos = 'pageY';\n        this.sizePos = 'offsetHeight';\n      } else {\n        this._addClass(this.sliderElem, 'slider-horizontal');\n\n        this.sliderElem.style.width = origWidth;\n        this.options.orientation = 'horizontal';\n\n        if (this.options.rtl) {\n          this.stylePos = 'right';\n        } else {\n          this.stylePos = 'left';\n        }\n\n        this.mousePos = 'clientX';\n        this.sizePos = 'offsetWidth';\n      } // specific rtl class\n\n\n      if (this.options.rtl) {\n        this._addClass(this.sliderElem, 'slider-rtl');\n      }\n\n      this._setTooltipPosition();\n      /* In case ticks are specified, overwrite the min and max bounds */\n\n\n      if (Array.isArray(this.options.ticks) && this.options.ticks.length > 0) {\n        this.options.max = Math.max.apply(Math, this.options.ticks);\n        this.options.min = Math.min.apply(Math, this.options.ticks);\n      }\n\n      if (Array.isArray(this.options.value)) {\n        this.options.range = true;\n        this._state.value = this.options.value;\n      } else if (this.options.range) {\n        // User wants a range, but value is not an array\n        this._state.value = [this.options.value, this.options.max];\n      } else {\n        this._state.value = this.options.value;\n      }\n\n      this.trackLow = sliderTrackLow || this.trackLow;\n      this.trackSelection = sliderTrackSelection || this.trackSelection;\n      this.trackHigh = sliderTrackHigh || this.trackHigh;\n\n      if (this.options.selection === 'none') {\n        this._addClass(this.trackLow, 'hide');\n\n        this._addClass(this.trackSelection, 'hide');\n\n        this._addClass(this.trackHigh, 'hide');\n      } else if (this.options.selection === 'after' || this.options.selection === 'before') {\n        this._removeClass(this.trackLow, 'hide');\n\n        this._removeClass(this.trackSelection, 'hide');\n\n        this._removeClass(this.trackHigh, 'hide');\n      }\n\n      this.handle1 = sliderMinHandle || this.handle1;\n      this.handle2 = sliderMaxHandle || this.handle2;\n\n      if (updateSlider === true) {\n        // Reset classes\n        this._removeClass(this.handle1, 'round triangle');\n\n        this._removeClass(this.handle2, 'round triangle hide');\n\n        for (i = 0; i < this.ticks.length; i++) {\n          this._removeClass(this.ticks[i], 'round triangle hide');\n        }\n      }\n\n      var availableHandleModifiers = ['round', 'triangle', 'custom'];\n      var isValidHandleType = availableHandleModifiers.indexOf(this.options.handle) !== -1;\n\n      if (isValidHandleType) {\n        this._addClass(this.handle1, this.options.handle);\n\n        this._addClass(this.handle2, this.options.handle);\n\n        for (i = 0; i < this.ticks.length; i++) {\n          this._addClass(this.ticks[i], this.options.handle);\n        }\n      }\n\n      this._state.offset = this._offset(this.sliderElem);\n      this._state.size = this.sliderElem[this.sizePos];\n      this.setValue(this._state.value);\n      /******************************************\n      \t\t\t\tBind Event Listeners\n      \t******************************************/\n      // Bind keyboard handlers\n\n      this.handle1Keydown = this._keydown.bind(this, 0);\n      this.handle1.addEventListener(\"keydown\", this.handle1Keydown, false);\n      this.handle2Keydown = this._keydown.bind(this, 1);\n      this.handle2.addEventListener(\"keydown\", this.handle2Keydown, false);\n      this.mousedown = this._mousedown.bind(this);\n      this.touchstart = this._touchstart.bind(this);\n      this.touchmove = this._touchmove.bind(this);\n\n      if (this.touchCapable) {\n        // Test for passive event support\n        var supportsPassive = false;\n\n        try {\n          var opts = Object.defineProperty({}, 'passive', {\n            get: function get() {\n              supportsPassive = true;\n            }\n          });\n          window.addEventListener(\"test\", null, opts);\n        } catch (e) {} // Use our detect's results. passive applied if supported, capture will be false either way.\n\n\n        var eventOptions = supportsPassive ? {\n          passive: true\n        } : false; // Bind touch handlers\n\n        this.sliderElem.addEventListener(\"touchstart\", this.touchstart, eventOptions);\n        this.sliderElem.addEventListener(\"touchmove\", this.touchmove, eventOptions);\n      }\n\n      this.sliderElem.addEventListener(\"mousedown\", this.mousedown, false); // Bind window handlers\n\n      this.resize = this._resize.bind(this);\n      window.addEventListener(\"resize\", this.resize, false); // Bind tooltip-related handlers\n\n      if (this.options.tooltip === 'hide') {\n        this._addClass(this.tooltip, 'hide');\n\n        this._addClass(this.tooltip_min, 'hide');\n\n        this._addClass(this.tooltip_max, 'hide');\n      } else if (this.options.tooltip === 'always') {\n        this._showTooltip();\n\n        this._alwaysShowTooltip = true;\n      } else {\n        this.showTooltip = this._showTooltip.bind(this);\n        this.hideTooltip = this._hideTooltip.bind(this);\n\n        if (this.options.ticks_tooltip) {\n          var callbackHandle = this._addTickListener(); //create handle1 listeners and store references in map\n\n\n          var mouseEnter = callbackHandle.addMouseEnter(this, this.handle1);\n          var mouseLeave = callbackHandle.addMouseLeave(this, this.handle1);\n          this.handleCallbackMap.handle1 = {\n            mouseEnter: mouseEnter,\n            mouseLeave: mouseLeave\n          }; //create handle2 listeners and store references in map\n\n          mouseEnter = callbackHandle.addMouseEnter(this, this.handle2);\n          mouseLeave = callbackHandle.addMouseLeave(this, this.handle2);\n          this.handleCallbackMap.handle2 = {\n            mouseEnter: mouseEnter,\n            mouseLeave: mouseLeave\n          };\n        } else {\n          this.sliderElem.addEventListener(\"mouseenter\", this.showTooltip, false);\n          this.sliderElem.addEventListener(\"mouseleave\", this.hideTooltip, false);\n        }\n\n        this.handle1.addEventListener(\"focus\", this.showTooltip, false);\n        this.handle1.addEventListener(\"blur\", this.hideTooltip, false);\n        this.handle2.addEventListener(\"focus\", this.showTooltip, false);\n        this.handle2.addEventListener(\"blur\", this.hideTooltip, false);\n      }\n\n      if (this.options.enabled) {\n        this.enable();\n      } else {\n        this.disable();\n      }\n    }\n    /*************************************************\n    \t\t\t\tINSTANCE PROPERTIES/METHODS\n    \t- Any methods bound to the prototype are considered\n    part of the plugin's `public` interface\n    \t**************************************************/\n\n\n    Slider.prototype = {\n      _init: function _init() {},\n      // NOTE: Must exist to support bridget\n      constructor: Slider,\n      defaultOptions: {\n        id: \"\",\n        min: 0,\n        max: 10,\n        step: 1,\n        precision: 0,\n        orientation: 'horizontal',\n        value: 5,\n        range: false,\n        selection: 'before',\n        tooltip: 'show',\n        tooltip_split: false,\n        handle: 'round',\n        reversed: false,\n        rtl: 'auto',\n        enabled: true,\n        formatter: function formatter(val) {\n          if (Array.isArray(val)) {\n            return val[0] + \" : \" + val[1];\n          } else {\n            return val;\n          }\n        },\n        natural_arrow_keys: false,\n        ticks: [],\n        ticks_positions: [],\n        ticks_labels: [],\n        ticks_snap_bounds: 0,\n        ticks_tooltip: false,\n        scale: 'linear',\n        focus: false,\n        tooltip_position: null,\n        labelledby: null,\n        rangeHighlights: []\n      },\n      getElement: function getElement() {\n        return this.sliderElem;\n      },\n      getValue: function getValue() {\n        if (this.options.range) {\n          return this._state.value;\n        } else {\n          return this._state.value[0];\n        }\n      },\n      setValue: function setValue(val, triggerSlideEvent, triggerChangeEvent) {\n        if (!val) {\n          val = 0;\n        }\n\n        var oldValue = this.getValue();\n        this._state.value = this._validateInputValue(val);\n\n        var applyPrecision = this._applyPrecision.bind(this);\n\n        if (this.options.range) {\n          this._state.value[0] = applyPrecision(this._state.value[0]);\n          this._state.value[1] = applyPrecision(this._state.value[1]);\n          this._state.value[0] = Math.max(this.options.min, Math.min(this.options.max, this._state.value[0]));\n          this._state.value[1] = Math.max(this.options.min, Math.min(this.options.max, this._state.value[1]));\n        } else {\n          this._state.value = applyPrecision(this._state.value);\n          this._state.value = [Math.max(this.options.min, Math.min(this.options.max, this._state.value))];\n\n          this._addClass(this.handle2, 'hide');\n\n          if (this.options.selection === 'after') {\n            this._state.value[1] = this.options.max;\n          } else {\n            this._state.value[1] = this.options.min;\n          }\n        }\n\n        if (this.options.max > this.options.min) {\n          this._state.percentage = [this._toPercentage(this._state.value[0]), this._toPercentage(this._state.value[1]), this.options.step * 100 / (this.options.max - this.options.min)];\n        } else {\n          this._state.percentage = [0, 0, 100];\n        }\n\n        this._layout();\n\n        var newValue = this.options.range ? this._state.value : this._state.value[0];\n\n        this._setDataVal(newValue);\n\n        if (triggerSlideEvent === true) {\n          this._trigger('slide', newValue);\n        }\n\n        if (oldValue !== newValue && triggerChangeEvent === true) {\n          this._trigger('change', {\n            oldValue: oldValue,\n            newValue: newValue\n          });\n        }\n\n        return this;\n      },\n      destroy: function destroy() {\n        // Remove event handlers on slider elements\n        this._removeSliderEventHandlers(); // Remove the slider from the DOM\n\n\n        this.sliderElem.parentNode.removeChild(this.sliderElem);\n        /* Show original <input> element */\n\n        this.element.style.display = \"\"; // Clear out custom event bindings\n\n        this._cleanUpEventCallbacksMap(); // Remove data values\n\n\n        this.element.removeAttribute(\"data\"); // Remove JQuery handlers/data\n\n        if ($) {\n          this._unbindJQueryEventHandlers();\n\n          this.$element.removeData('slider');\n        }\n      },\n      disable: function disable() {\n        this._state.enabled = false;\n        this.handle1.removeAttribute(\"tabindex\");\n        this.handle2.removeAttribute(\"tabindex\");\n\n        this._addClass(this.sliderElem, 'slider-disabled');\n\n        this._trigger('slideDisabled');\n\n        return this;\n      },\n      enable: function enable() {\n        this._state.enabled = true;\n        this.handle1.setAttribute(\"tabindex\", 0);\n        this.handle2.setAttribute(\"tabindex\", 0);\n\n        this._removeClass(this.sliderElem, 'slider-disabled');\n\n        this._trigger('slideEnabled');\n\n        return this;\n      },\n      toggle: function toggle() {\n        if (this._state.enabled) {\n          this.disable();\n        } else {\n          this.enable();\n        }\n\n        return this;\n      },\n      isEnabled: function isEnabled() {\n        return this._state.enabled;\n      },\n      on: function on(evt, callback) {\n        this._bindNonQueryEventHandler(evt, callback);\n\n        return this;\n      },\n      off: function off(evt, callback) {\n        if ($) {\n          this.$element.off(evt, callback);\n          this.$sliderElem.off(evt, callback);\n        } else {\n          this._unbindNonQueryEventHandler(evt, callback);\n        }\n      },\n      getAttribute: function getAttribute(attribute) {\n        if (attribute) {\n          return this.options[attribute];\n        } else {\n          return this.options;\n        }\n      },\n      setAttribute: function setAttribute(attribute, value) {\n        this.options[attribute] = value;\n        return this;\n      },\n      refresh: function refresh() {\n        this._removeSliderEventHandlers();\n\n        createNewSlider.call(this, this.element, this.options);\n\n        if ($) {\n          // Bind new instance of slider to the element\n          $.data(this.element, 'slider', this);\n        }\n\n        return this;\n      },\n      relayout: function relayout() {\n        this._resize();\n\n        return this;\n      },\n\n      /******************************+\n      \t\t\t\tHELPERS\n      \t- Any method that is not part of the public interface.\n      - Place it underneath this comment block and write its signature like so:\n      \t\t_fnName : function() {...}\n      \t********************************/\n      _removeSliderEventHandlers: function _removeSliderEventHandlers() {\n        // Remove keydown event listeners\n        this.handle1.removeEventListener(\"keydown\", this.handle1Keydown, false);\n        this.handle2.removeEventListener(\"keydown\", this.handle2Keydown, false); //remove the listeners from the ticks and handles if they had their own listeners\n\n        if (this.options.ticks_tooltip) {\n          var ticks = this.ticksContainer.getElementsByClassName('slider-tick');\n\n          for (var i = 0; i < ticks.length; i++) {\n            ticks[i].removeEventListener('mouseenter', this.ticksCallbackMap[i].mouseEnter, false);\n            ticks[i].removeEventListener('mouseleave', this.ticksCallbackMap[i].mouseLeave, false);\n          }\n\n          this.handle1.removeEventListener('mouseenter', this.handleCallbackMap.handle1.mouseEnter, false);\n          this.handle2.removeEventListener('mouseenter', this.handleCallbackMap.handle2.mouseEnter, false);\n          this.handle1.removeEventListener('mouseleave', this.handleCallbackMap.handle1.mouseLeave, false);\n          this.handle2.removeEventListener('mouseleave', this.handleCallbackMap.handle2.mouseLeave, false);\n        }\n\n        this.handleCallbackMap = null;\n        this.ticksCallbackMap = null;\n\n        if (this.showTooltip) {\n          this.handle1.removeEventListener(\"focus\", this.showTooltip, false);\n          this.handle2.removeEventListener(\"focus\", this.showTooltip, false);\n        }\n\n        if (this.hideTooltip) {\n          this.handle1.removeEventListener(\"blur\", this.hideTooltip, false);\n          this.handle2.removeEventListener(\"blur\", this.hideTooltip, false);\n        } // Remove event listeners from sliderElem\n\n\n        if (this.showTooltip) {\n          this.sliderElem.removeEventListener(\"mouseenter\", this.showTooltip, false);\n        }\n\n        if (this.hideTooltip) {\n          this.sliderElem.removeEventListener(\"mouseleave\", this.hideTooltip, false);\n        }\n\n        this.sliderElem.removeEventListener(\"touchstart\", this.touchstart, false);\n        this.sliderElem.removeEventListener(\"touchmove\", this.touchmove, false);\n        this.sliderElem.removeEventListener(\"mousedown\", this.mousedown, false); // Remove window event listener\n\n        window.removeEventListener(\"resize\", this.resize, false);\n      },\n      _bindNonQueryEventHandler: function _bindNonQueryEventHandler(evt, callback) {\n        if (this.eventToCallbackMap[evt] === undefined) {\n          this.eventToCallbackMap[evt] = [];\n        }\n\n        this.eventToCallbackMap[evt].push(callback);\n      },\n      _unbindNonQueryEventHandler: function _unbindNonQueryEventHandler(evt, callback) {\n        var callbacks = this.eventToCallbackMap[evt];\n\n        if (callbacks !== undefined) {\n          for (var i = 0; i < callbacks.length; i++) {\n            if (callbacks[i] === callback) {\n              callbacks.splice(i, 1);\n              break;\n            }\n          }\n        }\n      },\n      _cleanUpEventCallbacksMap: function _cleanUpEventCallbacksMap() {\n        var eventNames = Object.keys(this.eventToCallbackMap);\n\n        for (var i = 0; i < eventNames.length; i++) {\n          var eventName = eventNames[i];\n          delete this.eventToCallbackMap[eventName];\n        }\n      },\n      _showTooltip: function _showTooltip() {\n        if (this.options.tooltip_split === false) {\n          this._addClass(this.tooltip, 'in');\n\n          this.tooltip_min.style.display = 'none';\n          this.tooltip_max.style.display = 'none';\n        } else {\n          this._addClass(this.tooltip_min, 'in');\n\n          this._addClass(this.tooltip_max, 'in');\n\n          this.tooltip.style.display = 'none';\n        }\n\n        this._state.over = true;\n      },\n      _hideTooltip: function _hideTooltip() {\n        if (this._state.inDrag === false && this.alwaysShowTooltip !== true) {\n          this._removeClass(this.tooltip, 'in');\n\n          this._removeClass(this.tooltip_min, 'in');\n\n          this._removeClass(this.tooltip_max, 'in');\n        }\n\n        this._state.over = false;\n      },\n      _setToolTipOnMouseOver: function _setToolTipOnMouseOver(tempState) {\n        var formattedTooltipVal = this.options.formatter(!tempState ? this._state.value[0] : tempState.value[0]);\n        var positionPercentages = !tempState ? getPositionPercentages(this._state, this.options.reversed) : getPositionPercentages(tempState, this.options.reversed);\n\n        this._setText(this.tooltipInner, formattedTooltipVal);\n\n        this.tooltip.style[this.stylePos] = \"\".concat(positionPercentages[0], \"%\");\n\n        function getPositionPercentages(state, reversed) {\n          if (reversed) {\n            return [100 - state.percentage[0], this.options.range ? 100 - state.percentage[1] : state.percentage[1]];\n          }\n\n          return [state.percentage[0], state.percentage[1]];\n        }\n      },\n      _addTickListener: function _addTickListener() {\n        return {\n          addMouseEnter: function addMouseEnter(reference, tick, index) {\n            var enter = function enter() {\n              var tempState = reference._state;\n              var idString = index >= 0 ? index : this.attributes['aria-valuenow'].value;\n              var hoverIndex = parseInt(idString, 10);\n              tempState.value[0] = hoverIndex;\n              tempState.percentage[0] = reference.options.ticks_positions[hoverIndex];\n\n              reference._setToolTipOnMouseOver(tempState);\n\n              reference._showTooltip();\n            };\n\n            tick.addEventListener(\"mouseenter\", enter, false);\n            return enter;\n          },\n          addMouseLeave: function addMouseLeave(reference, tick) {\n            var leave = function leave() {\n              reference._hideTooltip();\n            };\n\n            tick.addEventListener(\"mouseleave\", leave, false);\n            return leave;\n          }\n        };\n      },\n      _layout: function _layout() {\n        var positionPercentages;\n\n        if (this.options.reversed) {\n          positionPercentages = [100 - this._state.percentage[0], this.options.range ? 100 - this._state.percentage[1] : this._state.percentage[1]];\n        } else {\n          positionPercentages = [this._state.percentage[0], this._state.percentage[1]];\n        }\n\n        this.handle1.style[this.stylePos] = \"\".concat(positionPercentages[0], \"%\");\n        this.handle1.setAttribute('aria-valuenow', this._state.value[0]);\n\n        if (isNaN(this.options.formatter(this._state.value[0]))) {\n          this.handle1.setAttribute('aria-valuetext', this.options.formatter(this._state.value[0]));\n        }\n\n        this.handle2.style[this.stylePos] = \"\".concat(positionPercentages[1], \"%\");\n        this.handle2.setAttribute('aria-valuenow', this._state.value[1]);\n\n        if (isNaN(this.options.formatter(this._state.value[1]))) {\n          this.handle2.setAttribute('aria-valuetext', this.options.formatter(this._state.value[1]));\n        }\n        /* Position highlight range elements */\n\n\n        if (this.rangeHighlightElements.length > 0 && Array.isArray(this.options.rangeHighlights) && this.options.rangeHighlights.length > 0) {\n          for (var _i = 0; _i < this.options.rangeHighlights.length; _i++) {\n            var startPercent = this._toPercentage(this.options.rangeHighlights[_i].start);\n\n            var endPercent = this._toPercentage(this.options.rangeHighlights[_i].end);\n\n            if (this.options.reversed) {\n              var sp = 100 - endPercent;\n              endPercent = 100 - startPercent;\n              startPercent = sp;\n            }\n\n            var currentRange = this._createHighlightRange(startPercent, endPercent);\n\n            if (currentRange) {\n              if (this.options.orientation === 'vertical') {\n                this.rangeHighlightElements[_i].style.top = \"\".concat(currentRange.start, \"%\");\n                this.rangeHighlightElements[_i].style.height = \"\".concat(currentRange.size, \"%\");\n              } else {\n                if (this.options.rtl) {\n                  this.rangeHighlightElements[_i].style.right = \"\".concat(currentRange.start, \"%\");\n                } else {\n                  this.rangeHighlightElements[_i].style.left = \"\".concat(currentRange.start, \"%\");\n                }\n\n                this.rangeHighlightElements[_i].style.width = \"\".concat(currentRange.size, \"%\");\n              }\n            } else {\n              this.rangeHighlightElements[_i].style.display = \"none\";\n            }\n          }\n        }\n        /* Position ticks and labels */\n\n\n        if (Array.isArray(this.options.ticks) && this.options.ticks.length > 0) {\n          var styleSize = this.options.orientation === 'vertical' ? 'height' : 'width';\n          var styleMargin;\n\n          if (this.options.orientation === 'vertical') {\n            styleMargin = 'marginTop';\n          } else {\n            if (this.options.rtl) {\n              styleMargin = 'marginRight';\n            } else {\n              styleMargin = 'marginLeft';\n            }\n          }\n\n          var labelSize = this._state.size / (this.options.ticks.length - 1);\n\n          if (this.tickLabelContainer) {\n            var extraMargin = 0;\n\n            if (this.options.ticks_positions.length === 0) {\n              if (this.options.orientation !== 'vertical') {\n                this.tickLabelContainer.style[styleMargin] = \"\".concat(-labelSize / 2, \"px\");\n              }\n\n              extraMargin = this.tickLabelContainer.offsetHeight;\n            } else {\n              /* Chidren are position absolute, calculate height by finding the max offsetHeight of a child */\n              for (i = 0; i < this.tickLabelContainer.childNodes.length; i++) {\n                if (this.tickLabelContainer.childNodes[i].offsetHeight > extraMargin) {\n                  extraMargin = this.tickLabelContainer.childNodes[i].offsetHeight;\n                }\n              }\n            }\n\n            if (this.options.orientation === 'horizontal') {\n              this.sliderElem.style.marginBottom = \"\".concat(extraMargin, \"px\");\n            }\n          }\n\n          for (var i = 0; i < this.options.ticks.length; i++) {\n            var percentage = this.options.ticks_positions[i] || this._toPercentage(this.options.ticks[i]);\n\n            if (this.options.reversed) {\n              percentage = 100 - percentage;\n            }\n\n            this.ticks[i].style[this.stylePos] = \"\".concat(percentage, \"%\");\n            /* Set class labels to denote whether ticks are in the selection */\n\n            this._removeClass(this.ticks[i], 'in-selection');\n\n            if (!this.options.range) {\n              if (this.options.selection === 'after' && percentage >= positionPercentages[0]) {\n                this._addClass(this.ticks[i], 'in-selection');\n              } else if (this.options.selection === 'before' && percentage <= positionPercentages[0]) {\n                this._addClass(this.ticks[i], 'in-selection');\n              }\n            } else if (percentage >= positionPercentages[0] && percentage <= positionPercentages[1]) {\n              this._addClass(this.ticks[i], 'in-selection');\n            }\n\n            if (this.tickLabels[i]) {\n              this.tickLabels[i].style[styleSize] = \"\".concat(labelSize, \"px\");\n\n              if (this.options.orientation !== 'vertical' && this.options.ticks_positions[i] !== undefined) {\n                this.tickLabels[i].style.position = 'absolute';\n                this.tickLabels[i].style[this.stylePos] = \"\".concat(percentage, \"%\");\n                this.tickLabels[i].style[styleMargin] = -labelSize / 2 + 'px';\n              } else if (this.options.orientation === 'vertical') {\n                if (this.options.rtl) {\n                  this.tickLabels[i].style['marginRight'] = \"\".concat(this.sliderElem.offsetWidth, \"px\");\n                } else {\n                  this.tickLabels[i].style['marginLeft'] = \"\".concat(this.sliderElem.offsetWidth, \"px\");\n                }\n\n                this.tickLabelContainer.style[styleMargin] = this.sliderElem.offsetWidth / 2 * -1 + 'px';\n              }\n            }\n          }\n        }\n\n        var formattedTooltipVal;\n\n        if (this.options.range) {\n          formattedTooltipVal = this.options.formatter(this._state.value);\n\n          this._setText(this.tooltipInner, formattedTooltipVal);\n\n          this.tooltip.style[this.stylePos] = \"\".concat((positionPercentages[1] + positionPercentages[0]) / 2, \"%\");\n          var innerTooltipMinText = this.options.formatter(this._state.value[0]);\n\n          this._setText(this.tooltipInner_min, innerTooltipMinText);\n\n          var innerTooltipMaxText = this.options.formatter(this._state.value[1]);\n\n          this._setText(this.tooltipInner_max, innerTooltipMaxText);\n\n          this.tooltip_min.style[this.stylePos] = \"\".concat(positionPercentages[0], \"%\");\n          this.tooltip_max.style[this.stylePos] = \"\".concat(positionPercentages[1], \"%\");\n        } else {\n          formattedTooltipVal = this.options.formatter(this._state.value[0]);\n\n          this._setText(this.tooltipInner, formattedTooltipVal);\n\n          this.tooltip.style[this.stylePos] = \"\".concat(positionPercentages[0], \"%\");\n        }\n\n        if (this.options.orientation === 'vertical') {\n          this.trackLow.style.top = '0';\n          this.trackLow.style.height = Math.min(positionPercentages[0], positionPercentages[1]) + '%';\n          this.trackSelection.style.top = Math.min(positionPercentages[0], positionPercentages[1]) + '%';\n          this.trackSelection.style.height = Math.abs(positionPercentages[0] - positionPercentages[1]) + '%';\n          this.trackHigh.style.bottom = '0';\n          this.trackHigh.style.height = 100 - Math.min(positionPercentages[0], positionPercentages[1]) - Math.abs(positionPercentages[0] - positionPercentages[1]) + '%';\n        } else {\n          if (this.stylePos === 'right') {\n            this.trackLow.style.right = '0';\n          } else {\n            this.trackLow.style.left = '0';\n          }\n\n          this.trackLow.style.width = Math.min(positionPercentages[0], positionPercentages[1]) + '%';\n\n          if (this.stylePos === 'right') {\n            this.trackSelection.style.right = Math.min(positionPercentages[0], positionPercentages[1]) + '%';\n          } else {\n            this.trackSelection.style.left = Math.min(positionPercentages[0], positionPercentages[1]) + '%';\n          }\n\n          this.trackSelection.style.width = Math.abs(positionPercentages[0] - positionPercentages[1]) + '%';\n\n          if (this.stylePos === 'right') {\n            this.trackHigh.style.left = '0';\n          } else {\n            this.trackHigh.style.right = '0';\n          }\n\n          this.trackHigh.style.width = 100 - Math.min(positionPercentages[0], positionPercentages[1]) - Math.abs(positionPercentages[0] - positionPercentages[1]) + '%';\n          var offset_min = this.tooltip_min.getBoundingClientRect();\n          var offset_max = this.tooltip_max.getBoundingClientRect();\n\n          if (this.options.tooltip_position === 'bottom') {\n            if (offset_min.right > offset_max.left) {\n              this._removeClass(this.tooltip_max, 'bottom');\n\n              this._addClass(this.tooltip_max, 'top');\n\n              this.tooltip_max.style.top = '';\n              this.tooltip_max.style.bottom = 22 + 'px';\n            } else {\n              this._removeClass(this.tooltip_max, 'top');\n\n              this._addClass(this.tooltip_max, 'bottom');\n\n              this.tooltip_max.style.top = this.tooltip_min.style.top;\n              this.tooltip_max.style.bottom = '';\n            }\n          } else {\n            if (offset_min.right > offset_max.left) {\n              this._removeClass(this.tooltip_max, 'top');\n\n              this._addClass(this.tooltip_max, 'bottom');\n\n              this.tooltip_max.style.top = 18 + 'px';\n            } else {\n              this._removeClass(this.tooltip_max, 'bottom');\n\n              this._addClass(this.tooltip_max, 'top');\n\n              this.tooltip_max.style.top = this.tooltip_min.style.top;\n            }\n          }\n        }\n      },\n      _createHighlightRange: function _createHighlightRange(start, end) {\n        if (this._isHighlightRange(start, end)) {\n          if (start > end) {\n            return {\n              'start': end,\n              'size': start - end\n            };\n          }\n\n          return {\n            'start': start,\n            'size': end - start\n          };\n        }\n\n        return null;\n      },\n      _isHighlightRange: function _isHighlightRange(start, end) {\n        if (0 <= start && start <= 100 && 0 <= end && end <= 100) {\n          return true;\n        } else {\n          return false;\n        }\n      },\n      _resize: function _resize(ev) {\n        /*jshint unused:false*/\n        this._state.offset = this._offset(this.sliderElem);\n        this._state.size = this.sliderElem[this.sizePos];\n\n        this._layout();\n      },\n      _removeProperty: function _removeProperty(element, prop) {\n        if (element.style.removeProperty) {\n          element.style.removeProperty(prop);\n        } else {\n          element.style.removeAttribute(prop);\n        }\n      },\n      _mousedown: function _mousedown(ev) {\n        if (!this._state.enabled) {\n          return false;\n        }\n\n        if (ev.preventDefault) {\n          ev.preventDefault();\n        }\n\n        this._state.offset = this._offset(this.sliderElem);\n        this._state.size = this.sliderElem[this.sizePos];\n\n        var percentage = this._getPercentage(ev);\n\n        if (this.options.range) {\n          var diff1 = Math.abs(this._state.percentage[0] - percentage);\n          var diff2 = Math.abs(this._state.percentage[1] - percentage);\n          this._state.dragged = diff1 < diff2 ? 0 : 1;\n\n          this._adjustPercentageForRangeSliders(percentage);\n        } else {\n          this._state.dragged = 0;\n        }\n\n        this._state.percentage[this._state.dragged] = percentage;\n\n        this._layout();\n\n        if (this.touchCapable) {\n          document.removeEventListener(\"touchmove\", this.mousemove, false);\n          document.removeEventListener(\"touchend\", this.mouseup, false);\n        }\n\n        if (this.mousemove) {\n          document.removeEventListener(\"mousemove\", this.mousemove, false);\n        }\n\n        if (this.mouseup) {\n          document.removeEventListener(\"mouseup\", this.mouseup, false);\n        }\n\n        this.mousemove = this._mousemove.bind(this);\n        this.mouseup = this._mouseup.bind(this);\n\n        if (this.touchCapable) {\n          // Touch: Bind touch events:\n          document.addEventListener(\"touchmove\", this.mousemove, false);\n          document.addEventListener(\"touchend\", this.mouseup, false);\n        } // Bind mouse events:\n\n\n        document.addEventListener(\"mousemove\", this.mousemove, false);\n        document.addEventListener(\"mouseup\", this.mouseup, false);\n        this._state.inDrag = true;\n\n        var newValue = this._calculateValue();\n\n        this._trigger('slideStart', newValue);\n\n        this._setDataVal(newValue);\n\n        this.setValue(newValue, false, true);\n        ev.returnValue = false;\n\n        if (this.options.focus) {\n          this._triggerFocusOnHandle(this._state.dragged);\n        }\n\n        return true;\n      },\n      _touchstart: function _touchstart(ev) {\n        if (ev.changedTouches === undefined) {\n          this._mousedown(ev);\n\n          return;\n        }\n\n        var touch = ev.changedTouches[0];\n        this.touchX = touch.pageX;\n        this.touchY = touch.pageY;\n      },\n      _triggerFocusOnHandle: function _triggerFocusOnHandle(handleIdx) {\n        if (handleIdx === 0) {\n          this.handle1.focus();\n        }\n\n        if (handleIdx === 1) {\n          this.handle2.focus();\n        }\n      },\n      _keydown: function _keydown(handleIdx, ev) {\n        if (!this._state.enabled) {\n          return false;\n        }\n\n        var dir;\n\n        switch (ev.keyCode) {\n          case 37: // left\n\n          case 40:\n            // down\n            dir = -1;\n            break;\n\n          case 39: // right\n\n          case 38:\n            // up\n            dir = 1;\n            break;\n        }\n\n        if (!dir) {\n          return;\n        } // use natural arrow keys instead of from min to max\n\n\n        if (this.options.natural_arrow_keys) {\n          var ifVerticalAndNotReversed = this.options.orientation === 'vertical' && !this.options.reversed;\n          var ifHorizontalAndReversed = this.options.orientation === 'horizontal' && this.options.reversed; // @todo control with rtl\n\n          if (ifVerticalAndNotReversed || ifHorizontalAndReversed) {\n            dir = -dir;\n          }\n        }\n\n        var val = this._state.value[handleIdx] + dir * this.options.step;\n        var percentage = val / this.options.max * 100;\n        this._state.keyCtrl = handleIdx;\n\n        if (this.options.range) {\n          this._adjustPercentageForRangeSliders(percentage);\n\n          var val1 = !this._state.keyCtrl ? val : this._state.value[0];\n          var val2 = this._state.keyCtrl ? val : this._state.value[1];\n          val = [val1, val2];\n        }\n\n        this._trigger('slideStart', val);\n\n        this._setDataVal(val);\n\n        this.setValue(val, true, true);\n\n        this._setDataVal(val);\n\n        this._trigger('slideStop', val);\n\n        this._layout();\n\n        this._pauseEvent(ev);\n\n        delete this._state.keyCtrl;\n        return false;\n      },\n      _pauseEvent: function _pauseEvent(ev) {\n        if (ev.stopPropagation) {\n          ev.stopPropagation();\n        }\n\n        if (ev.preventDefault) {\n          ev.preventDefault();\n        }\n\n        ev.cancelBubble = true;\n        ev.returnValue = false;\n      },\n      _mousemove: function _mousemove(ev) {\n        if (!this._state.enabled) {\n          return false;\n        }\n\n        var percentage = this._getPercentage(ev);\n\n        this._adjustPercentageForRangeSliders(percentage);\n\n        this._state.percentage[this._state.dragged] = percentage;\n\n        this._layout();\n\n        var val = this._calculateValue(true);\n\n        this.setValue(val, true, true);\n        return false;\n      },\n      _touchmove: function _touchmove(ev) {\n        if (ev.changedTouches === undefined) {\n          return;\n        }\n\n        var touch = ev.changedTouches[0];\n        var xDiff = touch.pageX - this.touchX;\n        var yDiff = touch.pageY - this.touchY;\n\n        if (!this._state.inDrag) {\n          // Vertical Slider\n          if (this.options.orientation === 'vertical' && xDiff <= 5 && xDiff >= -5 && (yDiff >= 15 || yDiff <= -15)) {\n            this._mousedown(ev);\n          } // Horizontal slider.\n          else if (yDiff <= 5 && yDiff >= -5 && (xDiff >= 15 || xDiff <= -15)) {\n              this._mousedown(ev);\n            }\n        }\n      },\n      _adjustPercentageForRangeSliders: function _adjustPercentageForRangeSliders(percentage) {\n        if (this.options.range) {\n          var precision = this._getNumDigitsAfterDecimalPlace(percentage);\n\n          precision = precision ? precision - 1 : 0;\n\n          var percentageWithAdjustedPrecision = this._applyToFixedAndParseFloat(percentage, precision);\n\n          if (this._state.dragged === 0 && this._applyToFixedAndParseFloat(this._state.percentage[1], precision) < percentageWithAdjustedPrecision) {\n            this._state.percentage[0] = this._state.percentage[1];\n            this._state.dragged = 1;\n          } else if (this._state.dragged === 1 && this._applyToFixedAndParseFloat(this._state.percentage[0], precision) > percentageWithAdjustedPrecision) {\n            this._state.percentage[1] = this._state.percentage[0];\n            this._state.dragged = 0;\n          } else if (this._state.keyCtrl === 0 && this._state.value[1] / this.options.max * 100 < percentage) {\n            this._state.percentage[0] = this._state.percentage[1];\n            this._state.keyCtrl = 1;\n            this.handle2.focus();\n          } else if (this._state.keyCtrl === 1 && this._state.value[0] / this.options.max * 100 > percentage) {\n            this._state.percentage[1] = this._state.percentage[0];\n            this._state.keyCtrl = 0;\n            this.handle1.focus();\n          }\n        }\n      },\n      _mouseup: function _mouseup() {\n        if (!this._state.enabled) {\n          return false;\n        }\n\n        if (this.touchCapable) {\n          // Touch: Unbind touch event handlers:\n          document.removeEventListener(\"touchmove\", this.mousemove, false);\n          document.removeEventListener(\"touchend\", this.mouseup, false);\n        } // Unbind mouse event handlers:\n\n\n        document.removeEventListener(\"mousemove\", this.mousemove, false);\n        document.removeEventListener(\"mouseup\", this.mouseup, false);\n        this._state.inDrag = false;\n\n        if (this._state.over === false) {\n          this._hideTooltip();\n        }\n\n        var val = this._calculateValue(true);\n\n        this._layout();\n\n        this._setDataVal(val);\n\n        this._trigger('slideStop', val); // No longer need 'dragged' after mouse up\n\n\n        this._state.dragged = null;\n        return false;\n      },\n      _calculateValue: function _calculateValue(snapToClosestTick) {\n        var val;\n\n        if (this.options.range) {\n          val = [this.options.min, this.options.max];\n\n          if (this._state.percentage[0] !== 0) {\n            val[0] = this._toValue(this._state.percentage[0]);\n            val[0] = this._applyPrecision(val[0]);\n          }\n\n          if (this._state.percentage[1] !== 100) {\n            val[1] = this._toValue(this._state.percentage[1]);\n            val[1] = this._applyPrecision(val[1]);\n          }\n        } else {\n          val = this._toValue(this._state.percentage[0]);\n          val = parseFloat(val);\n          val = this._applyPrecision(val);\n        }\n\n        if (snapToClosestTick) {\n          var min = [val, Infinity];\n\n          for (var i = 0; i < this.options.ticks.length; i++) {\n            var diff = Math.abs(this.options.ticks[i] - val);\n\n            if (diff <= min[1]) {\n              min = [this.options.ticks[i], diff];\n            }\n          }\n\n          if (min[1] <= this.options.ticks_snap_bounds) {\n            return min[0];\n          }\n        }\n\n        return val;\n      },\n      _applyPrecision: function _applyPrecision(val) {\n        var precision = this.options.precision || this._getNumDigitsAfterDecimalPlace(this.options.step);\n\n        return this._applyToFixedAndParseFloat(val, precision);\n      },\n      _getNumDigitsAfterDecimalPlace: function _getNumDigitsAfterDecimalPlace(num) {\n        var match = ('' + num).match(/(?:\\.(\\d+))?(?:[eE]([+-]?\\d+))?$/);\n\n        if (!match) {\n          return 0;\n        }\n\n        return Math.max(0, (match[1] ? match[1].length : 0) - (match[2] ? +match[2] : 0));\n      },\n      _applyToFixedAndParseFloat: function _applyToFixedAndParseFloat(num, toFixedInput) {\n        var truncatedNum = num.toFixed(toFixedInput);\n        return parseFloat(truncatedNum);\n      },\n\n      /*\n      \tCredits to Mike Samuel for the following method!\n      \tSource: http://stackoverflow.com/questions/10454518/javascript-how-to-retrieve-the-number-of-decimals-of-a-string-number\n      */\n      _getPercentage: function _getPercentage(ev) {\n        if (this.touchCapable && (ev.type === 'touchstart' || ev.type === 'touchmove')) {\n          ev = ev.touches[0];\n        }\n\n        var eventPosition = ev[this.mousePos];\n        var sliderOffset = this._state.offset[this.stylePos];\n        var distanceToSlide = eventPosition - sliderOffset;\n\n        if (this.stylePos === 'right') {\n          distanceToSlide = -distanceToSlide;\n        } // Calculate what percent of the length the slider handle has slid\n\n\n        var percentage = distanceToSlide / this._state.size * 100;\n        percentage = Math.round(percentage / this._state.percentage[2]) * this._state.percentage[2];\n\n        if (this.options.reversed) {\n          percentage = 100 - percentage;\n        } // Make sure the percent is within the bounds of the slider.\n        // 0% corresponds to the 'min' value of the slide\n        // 100% corresponds to the 'max' value of the slide\n\n\n        return Math.max(0, Math.min(100, percentage));\n      },\n      _validateInputValue: function _validateInputValue(val) {\n        if (!isNaN(+val)) {\n          return +val;\n        } else if (Array.isArray(val)) {\n          this._validateArray(val);\n\n          return val;\n        } else {\n          throw new Error(ErrorMsgs.formatInvalidInputErrorMsg(val));\n        }\n      },\n      _validateArray: function _validateArray(val) {\n        for (var i = 0; i < val.length; i++) {\n          var input = val[i];\n\n          if (typeof input !== 'number') {\n            throw new Error(ErrorMsgs.formatInvalidInputErrorMsg(input));\n          }\n        }\n      },\n      _setDataVal: function _setDataVal(val) {\n        this.element.setAttribute('data-value', val);\n        this.element.setAttribute('value', val);\n        this.element.value = val;\n      },\n      _trigger: function _trigger(evt, val) {\n        val = val || val === 0 ? val : undefined;\n        var callbackFnArray = this.eventToCallbackMap[evt];\n\n        if (callbackFnArray && callbackFnArray.length) {\n          for (var i = 0; i < callbackFnArray.length; i++) {\n            var callbackFn = callbackFnArray[i];\n            callbackFn(val);\n          }\n        }\n        /* If JQuery exists, trigger JQuery events */\n\n\n        if ($) {\n          this._triggerJQueryEvent(evt, val);\n        }\n      },\n      _triggerJQueryEvent: function _triggerJQueryEvent(evt, val) {\n        var eventData = {\n          type: evt,\n          value: val\n        };\n        this.$element.trigger(eventData);\n        this.$sliderElem.trigger(eventData);\n      },\n      _unbindJQueryEventHandlers: function _unbindJQueryEventHandlers() {\n        this.$element.off();\n        this.$sliderElem.off();\n      },\n      _setText: function _setText(element, text) {\n        if (typeof element.textContent !== \"undefined\") {\n          element.textContent = text;\n        } else if (typeof element.innerText !== \"undefined\") {\n          element.innerText = text;\n        }\n      },\n      _removeClass: function _removeClass(element, classString) {\n        var classes = classString.split(\" \");\n        var newClasses = element.className;\n\n        for (var i = 0; i < classes.length; i++) {\n          var classTag = classes[i];\n          var regex = new RegExp(\"(?:\\\\s|^)\" + classTag + \"(?:\\\\s|$)\");\n          newClasses = newClasses.replace(regex, \" \");\n        }\n\n        element.className = newClasses.trim();\n      },\n      _addClass: function _addClass(element, classString) {\n        var classes = classString.split(\" \");\n        var newClasses = element.className;\n\n        for (var i = 0; i < classes.length; i++) {\n          var classTag = classes[i];\n          var regex = new RegExp(\"(?:\\\\s|^)\" + classTag + \"(?:\\\\s|$)\");\n          var ifClassExists = regex.test(newClasses);\n\n          if (!ifClassExists) {\n            newClasses += \" \" + classTag;\n          }\n        }\n\n        element.className = newClasses.trim();\n      },\n      _offsetLeft: function _offsetLeft(obj) {\n        return obj.getBoundingClientRect().left;\n      },\n      _offsetRight: function _offsetRight(obj) {\n        return obj.getBoundingClientRect().right;\n      },\n      _offsetTop: function _offsetTop(obj) {\n        var offsetTop = obj.offsetTop;\n\n        while ((obj = obj.offsetParent) && !isNaN(obj.offsetTop)) {\n          offsetTop += obj.offsetTop;\n\n          if (obj.tagName !== 'BODY') {\n            offsetTop -= obj.scrollTop;\n          }\n        }\n\n        return offsetTop;\n      },\n      _offset: function _offset(obj) {\n        return {\n          left: this._offsetLeft(obj),\n          right: this._offsetRight(obj),\n          top: this._offsetTop(obj)\n        };\n      },\n      _css: function _css(elementRef, styleName, value) {\n        if ($) {\n          $.style(elementRef, styleName, value);\n        } else {\n          var style = styleName.replace(/^-ms-/, \"ms-\").replace(/-([\\da-z])/gi, function (all, letter) {\n            return letter.toUpperCase();\n          });\n          elementRef.style[style] = value;\n        }\n      },\n      _toValue: function _toValue(percentage) {\n        return this.options.scale.toValue.apply(this, [percentage]);\n      },\n      _toPercentage: function _toPercentage(value) {\n        return this.options.scale.toPercentage.apply(this, [value]);\n      },\n      _setTooltipPosition: function _setTooltipPosition() {\n        var tooltips = [this.tooltip, this.tooltip_min, this.tooltip_max];\n\n        if (this.options.orientation === 'vertical') {\n          var tooltipPos;\n\n          if (this.options.tooltip_position) {\n            tooltipPos = this.options.tooltip_position;\n          } else {\n            if (this.options.rtl) {\n              tooltipPos = 'left';\n            } else {\n              tooltipPos = 'right';\n            }\n          }\n\n          var oppositeSide = tooltipPos === 'left' ? 'right' : 'left';\n          tooltips.forEach(function (tooltip) {\n            this._addClass(tooltip, tooltipPos);\n\n            tooltip.style[oppositeSide] = '100%';\n          }.bind(this));\n        } else if (this.options.tooltip_position === 'bottom') {\n          tooltips.forEach(function (tooltip) {\n            this._addClass(tooltip, 'bottom');\n\n            tooltip.style.top = 22 + 'px';\n          }.bind(this));\n        } else {\n          tooltips.forEach(function (tooltip) {\n            this._addClass(tooltip, 'top');\n\n            tooltip.style.top = -this.tooltip.outerHeight - 14 + 'px';\n          }.bind(this));\n        }\n      }\n    };\n    /*********************************\n    \t\tAttach to global namespace\n    \t*********************************/\n\n    if ($ && $.fn) {\n      var autoRegisterNamespace;\n\n      if (!$.fn.slider) {\n        $.bridget(NAMESPACE_MAIN, Slider);\n        autoRegisterNamespace = NAMESPACE_MAIN;\n      } else {\n        if (windowIsDefined) {\n          window.console.warn(\"bootstrap-slider.js - WARNING: $.fn.slider namespace is already bound. Use the $.fn.bootstrapSlider namespace instead.\");\n        }\n\n        autoRegisterNamespace = NAMESPACE_ALTERNATE;\n      }\n\n      $.bridget(NAMESPACE_ALTERNATE, Slider); // Auto-Register data-provide=\"slider\" Elements\n\n      $(function () {\n        $(\"input[data-provide=slider]\")[autoRegisterNamespace]();\n      });\n    }\n  })($);\n\n  return Slider;\n});\n\n//# sourceURL=webpack:///./node_modules/bootstrap-slider/src/js/bootstrap-slider.js?");

/***/ }),

/***/ "jquery":
/*!********************************!*\
  !*** external "window.jQuery" ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = window.jQuery;\n\n//# sourceURL=webpack:///external_%22window.jQuery%22?");

/***/ })

/******/ });
});;