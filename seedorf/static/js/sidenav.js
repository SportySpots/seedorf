
(function(r,f) {
	var a=f();
	if(typeof a!=='object')return;
	var e=[typeof module==='object'&&typeof module.exports==='object'?module.exports:null,typeof window!=='undefined'?window:null,r&&r!==window?r:null];
	for(var i in a){e[0]&&(e[0][i]=a[i]);e[1]&&i!=='__esModule'&&(e[1][i] = a[i]);e[2]&&(e[2][i]=a[i]);}
})(this,function(){
	return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./js/sidenav.es6");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./js/sidenav.es6":
/*!************************!*\
  !*** ./js/sidenav.es6 ***!
  \************************/
/*! exports provided: SideNav */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SideNav\", function() { return SideNav; });\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar TRANSITION_EVENTS = ['transitionend', 'webkitTransitionEnd', 'oTransitionEnd'];\nvar TRANSITION_PROPERTIES = ['transition', 'MozTransition', 'webkitTransition', 'WebkitTransition', 'OTransition'];\nvar DELTA = 5;\n\nvar SideNav =\n/*#__PURE__*/\nfunction () {\n  function SideNav(el) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    var _PS = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n\n    _classCallCheck(this, SideNav);\n\n    this._el = el;\n    this._horizontal = options.orientation === 'horizontal';\n    this._animate = options.animate !== false && this._supportsTransitionEnd();\n    this._accordion = options.accordion !== false;\n    this._closeChildren = Boolean(options.closeChildren);\n    this._showDropdownOnHover = Boolean(options.showDropdownOnHover);\n    this._rtl = document.documentElement.getAttribute('dir') === 'rtl' || document.body.getAttribute('dir') === 'rtl';\n    this._lastWidth = this._horizontal ? window.innerWidth : null;\n\n    this._onOpen = options.onOpen || function () {};\n\n    this._onOpened = options.onOpened || function () {};\n\n    this._onClose = options.onClose || function () {};\n\n    this._onClosed = options.onClosed || function () {};\n\n    el.classList.add('sidenav');\n    el.classList[this._animate ? 'remove' : 'add']('sidenav-no-animation');\n\n    if (!this._horizontal) {\n      el.classList.add('sidenav-vertical');\n      el.classList.remove('sidenav-horizontal');\n      var PerfectScrollbarLib = _PS || window.PerfectScrollbar;\n\n      if (PerfectScrollbarLib) {\n        this._scrollbar = new PerfectScrollbarLib(el.querySelector('.sidenav-inner'), {\n          suppressScrollX: true,\n          wheelPropagation: true\n        });\n      }\n    } else {\n      el.classList.add('sidenav-horizontal');\n      el.classList.remove('sidenav-vertical');\n      this._inner = el.querySelector('.sidenav-inner');\n      var container = this._inner.parentNode;\n      this._prevBtn = el.querySelector('.sidenav-horizontal-prev');\n\n      if (!this._prevBtn) {\n        this._prevBtn = document.createElement('a');\n        this._prevBtn.href = '#';\n        this._prevBtn.className = 'sidenav-horizontal-prev';\n        container.appendChild(this._prevBtn);\n      }\n\n      this._wrapper = el.querySelector('.sidenav-horizontal-wrapper');\n\n      if (!this._wrapper) {\n        this._wrapper = document.createElement('div');\n        this._wrapper.className = 'sidenav-horizontal-wrapper';\n\n        this._wrapper.appendChild(this._inner);\n\n        container.appendChild(this._wrapper);\n      }\n\n      this._nextBtn = el.querySelector('.sidenav-horizontal-next');\n\n      if (!this._nextBtn) {\n        this._nextBtn = document.createElement('a');\n        this._nextBtn.href = '#';\n        this._nextBtn.className = 'sidenav-horizontal-next';\n        container.appendChild(this._nextBtn);\n      }\n\n      this._innerPosition = 0;\n      this.update();\n    }\n\n    this._bindEvents(); // Link sidenav instance to element\n\n\n    el.sidenavInstance = this;\n  }\n\n  _createClass(SideNav, [{\n    key: \"open\",\n    value: function open(el) {\n      var _this = this;\n\n      var closeChildren = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this._closeChildren;\n\n      var item = this._findUnopenedParent(this._getItem(el, true), closeChildren);\n\n      if (!item) return;\n\n      var toggleLink = this._getLink(item, true);\n\n      if (!this._horizontal || !this._isRoot(item)) {\n        if (this._animate) {\n          this._onOpen(this, item, toggleLink, this._findMenu(item));\n\n          window.requestAnimationFrame(function () {\n            return _this._toggleAnimation(true, item, false);\n          });\n        } else {\n          this._onOpen(this, item, toggleLink, this._findMenu(item));\n\n          item.classList.add('open');\n\n          this._onOpened(this, item, toggleLink, this._findMenu(item));\n        }\n\n        if (this._accordion) this._closeOther(item, closeChildren);\n      } else {\n        this._onOpen(this, item, toggleLink, this._findMenu(item));\n\n        this._toggleDropdown(true, item, closeChildren);\n\n        this._onOpened(this, item, toggleLink, this._findMenu(item));\n      }\n    }\n  }, {\n    key: \"close\",\n    value: function close(el) {\n      var _this2 = this;\n\n      var closeChildren = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this._closeChildren;\n\n      var item = this._getItem(el, true);\n\n      var toggleLink = this._getLink(el, true);\n\n      if (!item.classList.contains('open') || item.classList.contains('disabled')) return;\n\n      if (!this._horizontal || !this._isRoot(item)) {\n        if (this._animate) {\n          this._onClose(this, item, toggleLink, this._findMenu(item));\n\n          window.requestAnimationFrame(function () {\n            return _this2._toggleAnimation(false, item, closeChildren);\n          });\n        } else {\n          this._onClose(this, item, toggleLink, this._findMenu(item));\n\n          item.classList.remove('open');\n\n          if (closeChildren) {\n            var opened = item.querySelectorAll('.sidenav-item.open');\n\n            for (var i = 0, l = opened.length; i < l; i++) {\n              opened[i].classList.remove('open');\n            }\n          }\n\n          this._onClosed(this, item, toggleLink, this._findMenu(item));\n        }\n      } else {\n        this._onClose(this, item, toggleLink, this._findMenu(item));\n\n        this._toggleDropdown(false, item, closeChildren);\n\n        this._onClosed(this, item, toggleLink, this._findMenu(item));\n      }\n    }\n  }, {\n    key: \"toggle\",\n    value: function toggle(el) {\n      var closeChildren = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this._closeChildren;\n\n      var item = this._getItem(el, true);\n\n      var toggleLink = this._getLink(el, true);\n\n      if (item.classList.contains('open')) this.close(item, closeChildren);else this.open(item, closeChildren);\n    }\n  }, {\n    key: \"closeAll\",\n    value: function closeAll() {\n      var closeChildren = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this._closeChildren;\n\n      var opened = this._el.querySelectorAll('.sidenav-inner > .sidenav-item.open');\n\n      for (var i = 0, l = opened.length; i < l; i++) {\n        this.close(opened[i], closeChildren);\n      }\n    }\n  }, {\n    key: \"setActive\",\n    value: function setActive(el, active) {\n      var openTree = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n      var deactivateOthers = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n\n      var item = this._getItem(el, false);\n\n      if (active && deactivateOthers) {\n        var activeItems = this._el.querySelectorAll('.sidenav-inner .sidenav-item.active');\n\n        for (var i = 0, l = activeItems.length; i < l; i++) {\n          activeItems[i].classList.remove('active');\n        }\n      }\n\n      if (active && openTree) {\n        var parentItem = this._findParent(item, 'sidenav-item', false);\n\n        parentItem && this.open(parentItem);\n      }\n\n      while (item) {\n        item.classList[active ? 'add' : 'remove']('active');\n        item = this._findParent(item, 'sidenav-item', false);\n      }\n    }\n  }, {\n    key: \"setDisabled\",\n    value: function setDisabled(el, disabled) {\n      this._getItem(el, false).classList[disabled ? 'add' : 'remove']('disabled');\n    }\n  }, {\n    key: \"isActive\",\n    value: function isActive(el) {\n      return this._getItem(el, false).classList.contains('active');\n    }\n  }, {\n    key: \"isOpened\",\n    value: function isOpened(el) {\n      return this._getItem(el, false).classList.contains('open');\n    }\n  }, {\n    key: \"isDisabled\",\n    value: function isDisabled(el) {\n      return this._getItem(el, false).classList.contains('disabled');\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      if (!this._horizontal) {\n        if (this._scrollbar) {\n          this._scrollbar.update();\n        }\n      } else {\n        this.closeAll();\n        var wrapperWidth = Math.round(this._wrapper.getBoundingClientRect().width);\n        var innerWidth = this._innerWidth;\n        var position = this._innerPosition;\n\n        if (wrapperWidth - position > innerWidth) {\n          position = wrapperWidth - innerWidth;\n          if (position > 0) position = 0;\n          this._innerPosition = position;\n        }\n\n        this._updateSlider(wrapperWidth, innerWidth, position);\n      }\n    }\n  }, {\n    key: \"_updateSlider\",\n    value: function _updateSlider() {\n      var wrapperWidth = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      var innerWidth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      var position = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n\n      var _wrapperWidth = wrapperWidth !== null ? wrapperWidth : Math.round(this._wrapper.getBoundingClientRect().width);\n\n      var _innerWidth = innerWidth !== null ? innerWidth : this._innerWidth;\n\n      var _position = position !== null ? position : this._innerPosition;\n\n      if (_position === 0) this._prevBtn.classList.add('disabled');else this._prevBtn.classList.remove('disabled');\n      if (_innerWidth + _position <= _wrapperWidth) this._nextBtn.classList.add('disabled');else this._nextBtn.classList.remove('disabled');\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      if (!this._el) return;\n\n      this._unbindEvents();\n\n      var items = this._el.querySelectorAll('.sidenav-item');\n\n      for (var i = 0, l = items.length; i < l; i++) {\n        this._unbindAnimationEndEvent(items[i]);\n\n        items[i].classList.remove('sidenav-item-animating');\n        items[i].classList.remove('open');\n        items[i].style.overflow = null;\n        items[i].style.height = null;\n      }\n\n      var menus = this._el.querySelectorAll('.sidenav-menu');\n\n      for (var i2 = 0, l2 = menus.length; i2 < l2; i2++) {\n        menus[i2].style.marginRight = null;\n        menus[i2].style.marginLeft = null;\n      }\n\n      this._el.classList.remove('sidenav-no-animation');\n\n      if (this._wrapper) {\n        this._prevBtn.parentNode.removeChild(this._prevBtn);\n\n        this._nextBtn.parentNode.removeChild(this._nextBtn);\n\n        this._wrapper.parentNode.insertBefore(this._inner, this._wrapper);\n\n        this._wrapper.parentNode.removeChild(this._wrapper);\n\n        this._inner.style.marginLeft = null;\n        this._inner.style.marginRight = null;\n      }\n\n      this._el.sidenavInstance = null;\n      delete this._el.sidenavInstance;\n      this._el = null;\n      this._horizontal = null;\n      this._animate = null;\n      this._accordion = null;\n      this._closeChildren = null;\n      this._showDropdownOnHover = null;\n      this._rtl = null;\n      this._onOpen = null;\n      this._onOpened = null;\n      this._onClose = null;\n      this._onClosed = null;\n\n      if (this._scrollbar) {\n        this._scrollbar.destroy();\n\n        this._scrollbar = null;\n      }\n\n      this._inner = null;\n      this._prevBtn = null;\n      this._wrapper = null;\n      this._nextBtn = null;\n    }\n  }, {\n    key: \"_getLink\",\n    value: function _getLink(el, toggle) {\n      var found = [];\n      var selector = toggle ? 'sidenav-toggle' : 'sidenav-link';\n      if (el.classList.contains(selector)) found = [el];else if (el.classList.contains('sidenav-item')) found = this._findChild(el, [selector]);\n      if (!found.length) throw new Error(\"`\".concat(selector, \"` element not found.\"));\n      return found[0];\n    }\n  }, {\n    key: \"_getItem\",\n    value: function _getItem(el, toggle) {\n      var item = null;\n      var selector = toggle ? 'sidenav-toggle' : 'sidenav-link';\n\n      if (el.classList.contains('sidenav-item')) {\n        if (this._findChild(el, [selector]).length) item = el;\n      } else if (el.classList.contains(selector)) {\n        item = el.parentNode.classList.contains('sidenav-item') ? el.parentNode : null;\n      }\n\n      if (!item) {\n        throw new Error(\"\".concat(toggle ? 'Toggable ' : '', \"`.sidenav-item` element not found.\"));\n      }\n\n      return item;\n    }\n  }, {\n    key: \"_findUnopenedParent\",\n    value: function _findUnopenedParent(item, closeChildren) {\n      var tree = [];\n      var parentItem = null;\n\n      while (item) {\n        if (item.classList.contains('disabled')) {\n          parentItem = null;\n          tree = [];\n        } else {\n          if (!item.classList.contains('open')) parentItem = item;\n          tree.push(item);\n        }\n\n        item = this._findParent(item, 'sidenav-item', false);\n      }\n\n      if (!parentItem) return null;\n      if (tree.length === 1) return parentItem;\n      tree = tree.slice(0, tree.indexOf(parentItem));\n\n      for (var i = 0, l = tree.length; i < l; i++) {\n        tree[i].classList.add('open');\n\n        if (this._accordion) {\n          var openedItems = this._findChild(tree[i].parentNode, ['sidenav-item', 'open']);\n\n          for (var j = 0, k = openedItems.length; j < k; j++) {\n            if (openedItems[j] === tree[i]) continue;\n            openedItems[j].classList.remove('open');\n\n            if (closeChildren) {\n              var openedChildren = openedItems[j].querySelectorAll('.sidenav-item.open');\n\n              for (var x = 0, z = openedChildren.length; x < z; x++) {\n                openedChildren[x].classList.remove('open');\n              }\n            }\n          }\n        }\n      }\n\n      return parentItem;\n    }\n  }, {\n    key: \"_closeOther\",\n    value: function _closeOther(item, closeChildren) {\n      var opened = this._findChild(item.parentNode, ['sidenav-item', 'open']);\n\n      for (var i = 0, l = opened.length; i < l; i++) {\n        if (opened[i] !== item) this.close(opened[i], closeChildren);\n      }\n    }\n  }, {\n    key: \"_toggleAnimation\",\n    value: function _toggleAnimation(open, item, closeChildren) {\n      var _this3 = this;\n\n      var toggleLink = this._getLink(item, true);\n\n      var menu = this._findMenu(item);\n\n      this._unbindAnimationEndEvent(item);\n\n      var linkHeight = Math.round(toggleLink.getBoundingClientRect().height);\n      item.style.overflow = 'hidden';\n\n      var clearItemStyle = function clearItemStyle() {\n        item.classList.remove('sidenav-item-animating');\n        item.classList.remove('sidenav-item-closing');\n        item.style.overflow = null;\n        item.style.height = null;\n        if (!_this3._horizontal) _this3.update();\n      };\n\n      if (open) {\n        item.style.height = \"\".concat(linkHeight, \"px\");\n        item.classList.add('sidenav-item-animating');\n        item.classList.add('open');\n\n        this._bindAnimationEndEvent(item, function () {\n          clearItemStyle();\n\n          _this3._onOpened(_this3, item, toggleLink, menu);\n        });\n\n        setTimeout(function () {\n          return item.style.height = \"\".concat(linkHeight + Math.round(menu.getBoundingClientRect().height), \"px\");\n        }, 50);\n      } else {\n        item.style.height = \"\".concat(linkHeight + Math.round(menu.getBoundingClientRect().height), \"px\");\n        item.classList.add('sidenav-item-animating');\n        item.classList.add('sidenav-item-closing');\n\n        this._bindAnimationEndEvent(item, function () {\n          item.classList.remove('open');\n          clearItemStyle();\n\n          if (closeChildren) {\n            var opened = item.querySelectorAll('.sidenav-item.open');\n\n            for (var i = 0, l = opened.length; i < l; i++) {\n              opened[i].classList.remove('open');\n            }\n          }\n\n          _this3._onClosed(_this3, item, toggleLink, menu);\n        });\n\n        setTimeout(function () {\n          return item.style.height = \"\".concat(linkHeight, \"px\");\n        }, 50);\n      }\n    }\n  }, {\n    key: \"_toggleDropdown\",\n    value: function _toggleDropdown(show, item, closeChildren) {\n      var menu = this._findMenu(item);\n\n      if (show) {\n        var wrapperWidth = Math.round(this._wrapper.getBoundingClientRect().width);\n        var innerWidth = this._innerWidth;\n        var position = this._innerPosition;\n\n        var itemOffset = this._getItemOffset(item);\n\n        var itemWidth = Math.round(item.getBoundingClientRect().width);\n\n        if (itemOffset - DELTA <= -1 * position) {\n          this._innerPosition = -1 * itemOffset;\n        } else if (itemOffset + position + itemWidth + DELTA >= wrapperWidth) {\n          if (itemWidth > wrapperWidth) {\n            this._innerPosition = -1 * itemOffset;\n          } else {\n            this._innerPosition = -1 * (itemOffset + itemWidth - wrapperWidth);\n          }\n        }\n\n        item.classList.add('open');\n        var menuWidth = Math.round(menu.getBoundingClientRect().width);\n\n        if (itemOffset + this._innerPosition + menuWidth > wrapperWidth && menuWidth < wrapperWidth && menuWidth > itemWidth) {\n          menu.style[this._rtl ? 'marginRight' : 'marginLeft'] = \"-\".concat(menuWidth - itemWidth, \"px\");\n        }\n\n        this._closeOther(item, closeChildren);\n\n        this._updateSlider();\n      } else {\n        var toggle = this._findChild(item, ['sidenav-toggle']);\n\n        toggle.length && toggle[0].removeAttribute('data-hover', 'true');\n        item.classList.remove('open');\n        menu.style[this._rtl ? 'marginRight' : 'marginLeft'] = null;\n\n        if (closeChildren) {\n          var opened = menu.querySelectorAll('.sidenav-item.open');\n\n          for (var i = 0, l = opened.length; i < l; i++) {\n            opened[i].classList.remove('open');\n          }\n        }\n      }\n    }\n  }, {\n    key: \"_slide\",\n    value: function _slide(direction) {\n      var wrapperWidth = Math.round(this._wrapper.getBoundingClientRect().width);\n      var innerWidth = this._innerWidth;\n      var position = this._innerPosition;\n      var newPosition;\n\n      if (direction === 'next') {\n        newPosition = this._getSlideNextPos();\n\n        if (innerWidth + newPosition < wrapperWidth) {\n          newPosition = wrapperWidth - innerWidth;\n        }\n      } else {\n        newPosition = this._getSlidePrevPos();\n        if (newPosition > 0) newPosition = 0;\n      }\n\n      this._innerPosition = newPosition;\n      this.update();\n    }\n  }, {\n    key: \"_getSlideNextPos\",\n    value: function _getSlideNextPos() {\n      var wrapperWidth = Math.round(this._wrapper.getBoundingClientRect().width);\n      var position = this._innerPosition;\n      var curItem = this._inner.childNodes[0];\n      var left = 0;\n\n      while (curItem) {\n        if (curItem.tagName) {\n          var curItemWidth = Math.round(curItem.getBoundingClientRect().width);\n\n          if (left + position - DELTA <= wrapperWidth && left + position + curItemWidth + DELTA >= wrapperWidth) {\n            if (curItemWidth > wrapperWidth && left === -1 * position) left += curItemWidth;\n            break;\n          }\n\n          left += curItemWidth;\n        }\n\n        curItem = curItem.nextSibling;\n      }\n\n      return -1 * left;\n    }\n  }, {\n    key: \"_getSlidePrevPos\",\n    value: function _getSlidePrevPos() {\n      var wrapperWidth = Math.round(this._wrapper.getBoundingClientRect().width);\n      var position = this._innerPosition;\n      var curItem = this._inner.childNodes[0];\n      var left = 0;\n\n      while (curItem) {\n        if (curItem.tagName) {\n          var curItemWidth = Math.round(curItem.getBoundingClientRect().width);\n\n          if (left - DELTA <= -1 * position && left + curItemWidth + DELTA >= -1 * position) {\n            if (curItemWidth <= wrapperWidth) left = left + curItemWidth - wrapperWidth;\n            break;\n          }\n\n          left += curItemWidth;\n        }\n\n        curItem = curItem.nextSibling;\n      }\n\n      return -1 * left;\n    }\n  }, {\n    key: \"_getItemOffset\",\n    value: function _getItemOffset(item) {\n      var curItem = this._inner.childNodes[0];\n      var left = 0;\n\n      while (curItem !== item) {\n        if (curItem.tagName) {\n          left += Math.round(curItem.getBoundingClientRect().width);\n        }\n\n        curItem = curItem.nextSibling;\n      }\n\n      return left;\n    }\n  }, {\n    key: \"_bindAnimationEndEvent\",\n    value: function _bindAnimationEndEvent(el, handler) {\n      var _this4 = this;\n\n      var cb = function cb(e) {\n        if (e.target !== el) return;\n\n        _this4._unbindAnimationEndEvent(el);\n\n        handler(e);\n      };\n\n      var duration = window.getComputedStyle(el).transitionDuration;\n      duration = parseFloat(duration) * (duration.indexOf('ms') !== -1 ? 1 : 1000);\n      el._sideNavAnimationEndEventCb = cb;\n      TRANSITION_EVENTS.forEach(function (ev) {\n        return el.addEventListener(ev, el._sideNavAnimationEndEventCb, false);\n      });\n      el._sideNavAnimationEndEventTimeout = setTimeout(function () {\n        cb({\n          target: el\n        });\n      }, duration + 50);\n    }\n  }, {\n    key: \"_unbindAnimationEndEvent\",\n    value: function _unbindAnimationEndEvent(el) {\n      var cb = el._sideNavAnimationEndEventCb;\n\n      if (el._sideNavAnimationEndEventTimeout) {\n        clearTimeout(el._sideNavAnimationEndEventTimeout);\n        el._sideNavAnimationEndEventTimeout = null;\n      }\n\n      if (!cb) return;\n      TRANSITION_EVENTS.forEach(function (ev) {\n        return el.removeEventListener(ev, cb, false);\n      });\n      el._sideNavAnimationEndEventCb = null;\n    }\n  }, {\n    key: \"_bindEvents\",\n    value: function _bindEvents() {\n      var _this5 = this;\n\n      this._evntElClick = function (e) {\n        var toggleLink = e.target.classList.contains('sidenav-toggle') ? e.target : _this5._findParent(e.target, 'sidenav-toggle', false);\n\n        if (toggleLink) {\n          e.preventDefault();\n\n          if (toggleLink.getAttribute('data-hover') !== 'true') {\n            _this5.toggle(toggleLink);\n          }\n        }\n      };\n\n      this._el.addEventListener('click', this._evntElClick);\n\n      this._evntWindowResize = function () {\n        if (!_this5._horizontal) {\n          _this5.update();\n        } else if (_this5._lastWidth !== window.innerWidth) {\n          _this5._lastWidth = window.innerWidth;\n\n          _this5.update();\n        }\n      };\n\n      window.addEventListener('resize', this._evntWindowResize);\n\n      if (this._horizontal) {\n        this._evntPrevBtnClick = function (e) {\n          e.preventDefault();\n          if (_this5._prevBtn.classList.contains('disabled')) return;\n\n          _this5._slide('prev');\n        };\n\n        this._prevBtn.addEventListener('click', this._evntPrevBtnClick);\n\n        this._evntNextBtnClick = function (e) {\n          e.preventDefault();\n          if (_this5._nextBtn.classList.contains('disabled')) return;\n\n          _this5._slide('next');\n        };\n\n        this._nextBtn.addEventListener('click', this._evntNextBtnClick);\n\n        this._evntBodyClick = function (e) {\n          if (!_this5._inner.contains(e.target) && _this5._el.querySelectorAll('.sidenav-inner > .sidenav-item.open').length) _this5.closeAll();\n        };\n\n        document.body.addEventListener('click', this._evntBodyClick);\n\n        this._evntHorizontalElClick = function (e) {\n          var link = e.target.classList.contains('sidenav-link') ? e.target : _this5._findParent(e.target, 'sidenav-link', false);\n          if (link && !link.classList.contains('sidenav-toggle')) _this5.closeAll();\n        };\n\n        this._el.addEventListener('click', this._evntHorizontalElClick);\n\n        if (this._showDropdownOnHover) {\n          this._evntInnerMousemove = function (e) {\n            var curItem = _this5._findParent(e.target, 'sidenav-item', false);\n\n            var item = null;\n\n            while (curItem) {\n              item = curItem;\n              curItem = _this5._findParent(curItem, 'sidenav-item', false);\n            }\n\n            if (item && !item.classList.contains('open')) {\n              var toggle = _this5._findChild(item, ['sidenav-toggle']);\n\n              if (toggle.length) {\n                toggle[0].setAttribute('data-hover', 'true');\n\n                _this5.open(toggle[0], _this5._closeChildren, true);\n\n                setTimeout(function () {\n                  toggle[0].removeAttribute('data-hover');\n                }, 500);\n              }\n            }\n          };\n\n          this._inner.addEventListener('mousemove', this._evntInnerMousemove);\n\n          this._evntInnerMouseleave = function (e) {\n            _this5.closeAll();\n          };\n\n          this._inner.addEventListener('mouseleave', this._evntInnerMouseleave);\n        }\n      }\n    }\n  }, {\n    key: \"_unbindEvents\",\n    value: function _unbindEvents() {\n      if (this._evntElClick) {\n        this._el.removeEventListener('click', this._evntElClick);\n\n        this._evntElClick = null;\n      }\n\n      if (this._evntWindowResize) {\n        window.removeEventListener('resize', this._evntWindowResize);\n        this._evntWindowResize = null;\n      }\n\n      if (this._evntPrevBtnClick) {\n        this._prevBtn.removeEventListener('click', this._evntPrevBtnClick);\n\n        this._evntPrevBtnClick = null;\n      }\n\n      if (this._evntNextBtnClick) {\n        this._nextBtn.removeEventListener('click', this._evntNextBtnClick);\n\n        this._evntNextBtnClick = null;\n      }\n\n      if (this._evntBodyClick) {\n        document.body.removeEventListener('click', this._evntBodyClick);\n        this._evntBodyClick = null;\n      }\n\n      if (this._evntHorizontalElClick) {\n        this._el.removeEventListener('click', this._evntHorizontalElClick);\n\n        this._evntHorizontalElClick = null;\n      }\n\n      if (this._evntInnerMousemove) {\n        this._inner.removeEventListener('mousemove', this._evntInnerMousemove);\n\n        this._evntInnerMousemove = null;\n      }\n\n      if (this._evntInnerMouseleave) {\n        this._inner.removeEventListener('mouseleave', this._evntInnerMouseleave);\n\n        this._evntInnerMouseleave = null;\n      }\n    }\n  }, {\n    key: \"_findMenu\",\n    value: function _findMenu(item) {\n      var curEl = item.childNodes[0];\n      var menu = null;\n\n      while (curEl && !menu) {\n        if (curEl.classList && curEl.classList.contains('sidenav-menu')) menu = curEl;\n        curEl = curEl.nextSibling;\n      }\n\n      if (!menu) throw new Error('Cannot find `.sidenav-menu` element for the current `.sidenav-toggle`');\n      return menu;\n    }\n  }, {\n    key: \"_isRoot\",\n    value: function _isRoot(item) {\n      return !this._findParent(item, 'sidenav-item', false);\n    }\n  }, {\n    key: \"_findParent\",\n    value: function _findParent(el, cls) {\n      var throwError = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n      if (el.tagName.toUpperCase() === 'BODY') return null;\n      el = el.parentNode;\n\n      while (el.tagName.toUpperCase() !== 'BODY' && !el.classList.contains(cls)) {\n        el = el.parentNode;\n      }\n\n      el = el.tagName.toUpperCase() !== 'BODY' ? el : null;\n      if (!el && throwError) throw new Error(\"Cannot find `.\".concat(cls, \"` parent element\"));\n      return el;\n    }\n  }, {\n    key: \"_findChild\",\n    value: function _findChild(el, cls) {\n      var items = el.childNodes;\n      var found = [];\n\n      for (var i = 0, l = items.length, link; i < l; i++) {\n        if (items[i].classList) {\n          var passed = 0;\n\n          for (var j = 0; j < cls.length; j++) {\n            if (items[i].classList.contains(cls[j])) passed++;\n          }\n\n          if (cls.length === passed) found.push(items[i]);\n        }\n      }\n\n      return found;\n    }\n  }, {\n    key: \"_supportsTransitionEnd\",\n    value: function _supportsTransitionEnd() {\n      if (window.QUnit) {\n        return false;\n      }\n\n      var el = document.body || document.documentElement;\n      var result = false;\n      TRANSITION_PROPERTIES.forEach(function (evnt) {\n        if (typeof el.style[evnt] !== 'undefined') result = true;\n      });\n      return result;\n    }\n  }, {\n    key: \"_innerWidth\",\n    get: function get() {\n      var items = this._inner.childNodes;\n      var width = 0;\n\n      for (var i = 0, l = items.length; i < l; i++) {\n        if (items[i].tagName) {\n          width += Math.round(items[i].getBoundingClientRect().width);\n        }\n      }\n\n      return width;\n    }\n  }, {\n    key: \"_innerPosition\",\n    get: function get() {\n      return parseInt(this._inner.style[this._rtl ? 'marginRight' : 'marginLeft'] || '0px');\n    },\n    set: function set(value) {\n      this._inner.style[this._rtl ? 'marginRight' : 'marginLeft'] = \"\".concat(value, \"px\");\n      return value;\n    }\n  }]);\n\n  return SideNav;\n}();\n\n\n\n//# sourceURL=webpack:///./js/sidenav.es6?");

/***/ })

/******/ });
});;